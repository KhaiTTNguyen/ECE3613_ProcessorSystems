
GccApplication4_Timer1CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a42  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000987  00000000  00000000  00000c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bf  00000000  00000000  00001625  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000018e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bb  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003b  00000000  00000000  00001dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001e0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  68:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  6c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  70:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  74:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  7c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  80:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  84:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  88:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  8c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  90:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  94:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  98:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  9c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  ac:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  bc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  dc:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <main>:
 */ 

#include <avr/io.h>
#define F_CPU 16000000UL
#include <util\delay.h>
int main (void) {
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
	while (1)
	{
		DDRA = 1<<5;
  ec:	81 e2       	ldi	r24, 0x21	; 33
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	20 e2       	ldi	r18, 0x20	; 32
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
		PORTA ^= (1<<5);  //toggle pa5
  f6:	82 e2       	ldi	r24, 0x22	; 34
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	22 e2       	ldi	r18, 0x22	; 34
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	f9 01       	movw	r30, r18
 100:	30 81       	ld	r19, Z
 102:	20 e2       	ldi	r18, 0x20	; 32
 104:	23 27       	eor	r18, r19
 106:	fc 01       	movw	r30, r24
 108:	20 83       	st	Z, r18
		TCNT1H = 0x00;
 10a:	85 e8       	ldi	r24, 0x85	; 133
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	fc 01       	movw	r30, r24
 110:	10 82       	st	Z, r1
		TCNT1L = 0x00;
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	10 82       	st	Z, r1
		OCR1BH=0x3E;	// output compare regH 
 11a:	8b e8       	ldi	r24, 0x8B	; 139
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	2e e3       	ldi	r18, 0x3E	; 62
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
		OCR1BL=0x80;	// output compare regL
 124:	8a e8       	ldi	r24, 0x8A	; 138
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	20 e8       	ldi	r18, 0x80	; 128
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
		TCCR1A = 0x00;
 12e:	80 e8       	ldi	r24, 0x80	; 128
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	fc 01       	movw	r30, r24
 134:	10 82       	st	Z, r1
		TCCR1B = 0x09;//ctc mode no prescaler
 136:	81 e8       	ldi	r24, 0x81	; 129
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	29 e0       	ldi	r18, 0x09	; 9
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
		while((TIFR1&(1<<OCF1B))==0);			// wait till output compare flag turn on
 140:	00 00       	nop
 142:	86 e3       	ldi	r24, 0x36	; 54
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	88 2f       	mov	r24, r24
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	84 70       	andi	r24, 0x04	; 4
 150:	99 27       	eor	r25, r25
 152:	89 2b       	or	r24, r25
 154:	b1 f3       	breq	.-20     	; 0x142 <main+0x5e>
		TCCR1A = 0;
 156:	80 e8       	ldi	r24, 0x80	; 128
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	fc 01       	movw	r30, r24
 15c:	10 82       	st	Z, r1
		TCCR1B = 0;
 15e:	81 e8       	ldi	r24, 0x81	; 129
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	fc 01       	movw	r30, r24
 164:	10 82       	st	Z, r1
		TIFR1 = (1<<OCF1B);
 166:	86 e3       	ldi	r24, 0x36	; 54
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	24 e0       	ldi	r18, 0x04	; 4
 16c:	fc 01       	movw	r30, r24
 16e:	20 83       	st	Z, r18
	}
 170:	bd cf       	rjmp	.-134    	; 0xec <main+0x8>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
