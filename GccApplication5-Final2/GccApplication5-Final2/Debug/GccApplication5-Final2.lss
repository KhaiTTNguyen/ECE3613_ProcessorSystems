
GccApplication5-Final2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000208  00800100  00000cfc  00000d90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800308  00800308  00000f98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001de1  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d51  00000000  00000000  00002f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ff4  00000000  00000000  00003c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00004c80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000916  00000000  00000000  00005050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000111f  00000000  00000000  00005966  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00006a85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
   4:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  10:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  14:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  18:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  1c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  20:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  24:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  28:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  2c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  30:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  38:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  3c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  40:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  44:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  48:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  4c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  50:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  54:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  58:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  5c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  60:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  64:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  68:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  6c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  70:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  74:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  78:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  7c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  80:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  84:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  88:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  8c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  90:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  94:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  98:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  9c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  a0:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  a4:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  a8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  ac:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  b0:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  b4:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  b8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  bc:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  c0:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  c4:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  c8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  cc:	a4 04       	cpc	r10, r4
  ce:	aa 04       	cpc	r10, r10
  d0:	aa 04       	cpc	r10, r10
  d2:	aa 04       	cpc	r10, r10
  d4:	aa 04       	cpc	r10, r10
  d6:	aa 04       	cpc	r10, r10
  d8:	aa 04       	cpc	r10, r10
  da:	aa 04       	cpc	r10, r10
  dc:	aa 04       	cpc	r10, r10
  de:	aa 04       	cpc	r10, r10
  e0:	aa 04       	cpc	r10, r10
  e2:	aa 04       	cpc	r10, r10
  e4:	aa 04       	cpc	r10, r10
  e6:	aa 04       	cpc	r10, r10
  e8:	aa 04       	cpc	r10, r10
  ea:	aa 04       	cpc	r10, r10
  ec:	aa 04       	cpc	r10, r10
  ee:	aa 04       	cpc	r10, r10
  f0:	aa 04       	cpc	r10, r10
  f2:	aa 04       	cpc	r10, r10
  f4:	aa 04       	cpc	r10, r10
  f6:	aa 04       	cpc	r10, r10
  f8:	aa 04       	cpc	r10, r10
  fa:	aa 04       	cpc	r10, r10
  fc:	aa 04       	cpc	r10, r10
  fe:	aa 04       	cpc	r10, r10
 100:	aa 04       	cpc	r10, r10
 102:	aa 04       	cpc	r10, r10
 104:	aa 04       	cpc	r10, r10
 106:	7a 04       	cpc	r7, r10
 108:	eb 03       	fmulsu	r22, r19
 10a:	0e 04       	cpc	r0, r14
 10c:	aa 04       	cpc	r10, r10
 10e:	8c 04       	cpc	r8, r12
 110:	aa 04       	cpc	r10, r10
 112:	aa 04       	cpc	r10, r10
 114:	aa 04       	cpc	r10, r10
 116:	aa 04       	cpc	r10, r10
 118:	aa 04       	cpc	r10, r10
 11a:	aa 04       	cpc	r10, r10
 11c:	aa 04       	cpc	r10, r10
 11e:	aa 04       	cpc	r10, r10
 120:	aa 04       	cpc	r10, r10
 122:	aa 04       	cpc	r10, r10
 124:	aa 04       	cpc	r10, r10
 126:	aa 04       	cpc	r10, r10
 128:	99 04       	cpc	r9, r9
 12a:	aa 04       	cpc	r10, r10
 12c:	3b 04       	cpc	r3, r11
 12e:	aa 04       	cpc	r10, r10
 130:	aa 04       	cpc	r10, r10
 132:	59 04       	cpc	r5, r9
 134:	aa 04       	cpc	r10, r10
 136:	aa 04       	cpc	r10, r10
 138:	aa 04       	cpc	r10, r10
 13a:	aa 04       	cpc	r10, r10
 13c:	aa 04       	cpc	r10, r10
 13e:	aa 04       	cpc	r10, r10
 140:	aa 04       	cpc	r10, r10
 142:	aa 04       	cpc	r10, r10
 144:	aa 04       	cpc	r10, r10
 146:	68 04       	cpc	r6, r8
 148:	eb 03       	fmulsu	r22, r19
 14a:	f5 03       	fmuls	r23, r21
 14c:	aa 04       	cpc	r10, r10
 14e:	8c 04       	cpc	r8, r12
 150:	aa 04       	cpc	r10, r10
 152:	aa 04       	cpc	r10, r10
 154:	aa 04       	cpc	r10, r10
 156:	aa 04       	cpc	r10, r10
 158:	aa 04       	cpc	r10, r10
 15a:	aa 04       	cpc	r10, r10
 15c:	aa 04       	cpc	r10, r10
 15e:	aa 04       	cpc	r10, r10
 160:	aa 04       	cpc	r10, r10
 162:	aa 04       	cpc	r10, r10
 164:	aa 04       	cpc	r10, r10
 166:	aa 04       	cpc	r10, r10
 168:	99 04       	cpc	r9, r9
 16a:	aa 04       	cpc	r10, r10
 16c:	2c 04       	cpc	r2, r12
 16e:	aa 04       	cpc	r10, r10
 170:	aa 04       	cpc	r10, r10
 172:	4a 04       	cpc	r4, r10

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf ef       	ldi	r28, 0xFF	; 255
 17a:	d8 e0       	ldi	r29, 0x08	; 8
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	13 e0       	ldi	r17, 0x03	; 3
 182:	a0 e0       	ldi	r26, 0x00	; 0
 184:	b1 e0       	ldi	r27, 0x01	; 1
 186:	ec ef       	ldi	r30, 0xFC	; 252
 188:	fc e0       	ldi	r31, 0x0C	; 12
 18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x10>
 18c:	05 90       	lpm	r0, Z+
 18e:	0d 92       	st	X+, r0
 190:	a8 30       	cpi	r26, 0x08	; 8
 192:	b1 07       	cpc	r27, r17
 194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0xc>

00000196 <__do_clear_bss>:
 196:	23 e0       	ldi	r18, 0x03	; 3
 198:	a8 e0       	ldi	r26, 0x08	; 8
 19a:	b3 e0       	ldi	r27, 0x03	; 3
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <.do_clear_bss_start>

0000019e <.do_clear_bss_loop>:
 19e:	1d 92       	st	X+, r1

000001a0 <.do_clear_bss_start>:
 1a0:	af 30       	cpi	r26, 0x0F	; 15
 1a2:	b2 07       	cpc	r27, r18
 1a4:	e1 f7       	brne	.-8      	; 0x19e <.do_clear_bss_loop>
 1a6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
 1aa:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <_exit>

000001ae <__bad_interrupt>:
 1ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b2 <i2c_init>:
			I2C_ErrorCode |= (1 << I2C_READNACK);
            return 0;
		}
	};
    return TWDR;
}
 1b2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1b6:	88 e4       	ldi	r24, 0x48	; 72
 1b8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1c2:	08 95       	ret

000001c4 <i2c_start>:
 1c4:	94 ea       	ldi	r25, 0xA4	; 164
 1c6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ca:	20 e4       	ldi	r18, 0x40	; 64
 1cc:	31 e0       	ldi	r19, 0x01	; 1
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <i2c_start+0x1e>
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	31 09       	sbc	r19, r1
 1d4:	31 f4       	brne	.+12     	; 0x1e2 <i2c_start+0x1e>
 1d6:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <I2C_ErrorCode>
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <I2C_ErrorCode>
 1e0:	08 95       	ret
 1e2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1e6:	99 23       	and	r25, r25
 1e8:	1c f0       	brlt	.+6      	; 0x1f0 <i2c_start+0x2c>
 1ea:	21 15       	cp	r18, r1
 1ec:	31 05       	cpc	r19, r1
 1ee:	81 f7       	brne	.-32     	; 0x1d0 <i2c_start+0xc>
 1f0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1f4:	84 e8       	ldi	r24, 0x84	; 132
 1f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1fa:	80 e4       	ldi	r24, 0x40	; 64
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	08 c0       	rjmp	.+16     	; 0x210 <i2c_start+0x4c>
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	31 f4       	brne	.+12     	; 0x210 <i2c_start+0x4c>
 204:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <I2C_ErrorCode>
 208:	82 60       	ori	r24, 0x02	; 2
 20a:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <I2C_ErrorCode>
 20e:	08 95       	ret
 210:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 214:	22 23       	and	r18, r18
 216:	14 f0       	brlt	.+4      	; 0x21c <i2c_start+0x58>
 218:	00 97       	sbiw	r24, 0x00	; 0
 21a:	91 f7       	brne	.-28     	; 0x200 <i2c_start+0x3c>
 21c:	08 95       	ret

0000021e <i2c_stop>:
 21e:	84 e9       	ldi	r24, 0x94	; 148
 220:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 224:	08 95       	ret

00000226 <i2c_byte>:
 226:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 22a:	84 e8       	ldi	r24, 0x84	; 132
 22c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 230:	80 e4       	ldi	r24, 0x40	; 64
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	08 c0       	rjmp	.+16     	; 0x246 <i2c_byte+0x20>
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	31 f4       	brne	.+12     	; 0x246 <i2c_byte+0x20>
 23a:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <I2C_ErrorCode>
 23e:	84 60       	ori	r24, 0x04	; 4
 240:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <I2C_ErrorCode>
 244:	08 95       	ret
 246:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 24a:	22 23       	and	r18, r18
 24c:	14 f0       	brlt	.+4      	; 0x252 <i2c_byte+0x2c>
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	91 f7       	brne	.-28     	; 0x236 <i2c_byte+0x10>
 252:	08 95       	ret

00000254 <i2c_tx_start>:

//Modified section below
void i2c_tx_start(void){
	i2c_init();
 254:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <i2c_init>
 258:	08 95       	ret

0000025a <i2c_tx_address>:
}
void i2c_tx_address(uint8_t addr){
	i2c_start(addr);
 25a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <i2c_start>
 25e:	08 95       	ret

00000260 <i2c_tx_byte>:
}
void i2c_tx_byte(uint8_t ch){
	i2c_byte(ch);
 260:	0e 94 13 01 	call	0x226	; 0x226 <i2c_byte>
 264:	08 95       	ret

00000266 <i2c_tx_stop>:
}
void i2c_tx_stop(void){
	i2c_stop();
 266:	0e 94 0f 01 	call	0x21e	; 0x21e <i2c_stop>
 26a:	08 95       	ret

0000026c <OLED_display>:
volatile char dutyCycle = 0;	//global variable containing selected motor speed value
volatile char lastInput = 0;	//variable to store the last state of PORTB
int count_int = 0;				//set pwm value to 0 (no pwm) initially

void OLED_display(){	//this will update the OLED display with the most current info
	OLED_SetCursor(0, 0);
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 59 02 	call	0x4b2	; 0x4b2 <OLED_SetCursor>
	OLED_Printf("Example of Joystick ");
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	9f 93       	push	r25
 27a:	8f 93       	push	r24
 27c:	0e 94 a8 03 	call	0x750	; 0x750 <OLED_Printf>
	OLED_SetCursor(2, 0);
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	0e 94 59 02 	call	0x4b2	; 0x4b2 <OLED_SetCursor>
	OLED_Printf("Counter: ");
 288:	85 e1       	ldi	r24, 0x15	; 21
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	9f 93       	push	r25
 28e:	8f 93       	push	r24
 290:	0e 94 a8 03 	call	0x750	; 0x750 <OLED_Printf>
	OLED_DisplayNumber(C_DECIMAL_U8,count_int,6);
 294:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <__data_end>
 298:	50 91 09 03 	lds	r21, 0x0309	; 0x800309 <__data_end+0x1>
 29c:	05 2e       	mov	r0, r21
 29e:	00 0c       	add	r0, r0
 2a0:	66 0b       	sbc	r22, r22
 2a2:	77 0b       	sbc	r23, r23
 2a4:	26 e0       	ldi	r18, 0x06	; 6
 2a6:	8a e0       	ldi	r24, 0x0A	; 10
 2a8:	0e 94 cc 02 	call	0x598	; 0x598 <OLED_DisplayNumber>
	OLED_SetCursor(4, 0);
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	84 e0       	ldi	r24, 0x04	; 4
 2b0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <OLED_SetCursor>
	OLED_Printf("Duty Cycle: ");
 2b4:	8f e1       	ldi	r24, 0x1F	; 31
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	9f 93       	push	r25
 2ba:	8f 93       	push	r24
 2bc:	0e 94 a8 03 	call	0x750	; 0x750 <OLED_Printf>
	OLED_DisplayNumber(C_DECIMAL_U8,dutyCycle,6);
 2c0:	40 91 0b 03 	lds	r20, 0x030B	; 0x80030b <dutyCycle>
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	26 e0       	ldi	r18, 0x06	; 6
 2cc:	8a e0       	ldi	r24, 0x0A	; 10
 2ce:	0e 94 cc 02 	call	0x598	; 0x598 <OLED_DisplayNumber>
}
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	08 95       	ret

000002e0 <main>:

int main(void){
	//set data direction of used ports
	DDRB = 0x00;	//set port b pins to inputs
 2e0:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xA0;	//set port b pins to have pull-up resistors 10100000
 2e2:	80 ea       	ldi	r24, 0xA0	; 160
 2e4:	85 b9       	out	0x05, r24	; 5
	
	OLED_Init(); //INITIALIZE THE OLED
 2e6:	0e 94 09 02 	call	0x412	; 0x412 <OLED_Init>
	OLED_Clear(); //CLEAR THE DISPLAY
 2ea:	0e 94 c9 01 	call	0x392	; 0x392 <OLED_Clear>
	
	while (1) {	//infinite loop
		char joystick = (0b11110000&PINB);	//get high 4 bits of PORTB (contains up and down button)
 2ee:	83 b1       	in	r24, 0x03	; 3
 2f0:	80 7f       	andi	r24, 0xF0	; 240
		joystick = joystick^0xf0;	//invert value of of up and down button (Pullup resistors pull pins high)
 2f2:	90 ef       	ldi	r25, 0xF0	; 240
 2f4:	89 27       	eor	r24, r25
		if(lastInput != joystick){		//check if PORTB has been updated
 2f6:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <lastInput>
 2fa:	89 17       	cp	r24, r25
 2fc:	49 f1       	breq	.+82     	; 0x350 <main+0x70>
			if(joystick&(1<<up_count)){	//check for up button being pressed
 2fe:	85 ff       	sbrs	r24, 5
 300:	0d c0       	rjmp	.+26     	; 0x31c <main+0x3c>
				if(count_int < 10)		//if the PWM value is less than 10,
 302:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <__data_end>
 306:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <__data_end+0x1>
 30a:	2a 30       	cpi	r18, 0x0A	; 10
 30c:	31 05       	cpc	r19, r1
 30e:	34 f4       	brge	.+12     	; 0x31c <main+0x3c>
				count_int++;	//YES: increment it
 310:	2f 5f       	subi	r18, 0xFF	; 255
 312:	3f 4f       	sbci	r19, 0xFF	; 255
 314:	30 93 09 03 	sts	0x0309, r19	; 0x800309 <__data_end+0x1>
 318:	20 93 08 03 	sts	0x0308, r18	; 0x800308 <__data_end>
			}
			if(joystick&(1<<down_count)){	//check for down button being pressed
 31c:	88 23       	and	r24, r24
 31e:	6c f4       	brge	.+26     	; 0x33a <main+0x5a>
				if(count_int > 0)			//if the PWM value is more than 0,
 320:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <__data_end>
 324:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <__data_end+0x1>
 328:	12 16       	cp	r1, r18
 32a:	13 06       	cpc	r1, r19
 32c:	34 f4       	brge	.+12     	; 0x33a <main+0x5a>
				count_int--;	//NO: decrement it
 32e:	21 50       	subi	r18, 0x01	; 1
 330:	31 09       	sbc	r19, r1
 332:	30 93 09 03 	sts	0x0309, r19	; 0x800309 <__data_end+0x1>
 336:	20 93 08 03 	sts	0x0308, r18	; 0x800308 <__data_end>
			}
			dutyCycle = count_int*10;//update dutyCycle variable for OLED display
 33a:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <__data_end>
 33e:	99 0f       	add	r25, r25
 340:	29 2f       	mov	r18, r25
 342:	22 0f       	add	r18, r18
 344:	22 0f       	add	r18, r18
 346:	92 0f       	add	r25, r18
 348:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <dutyCycle>
			lastInput = joystick;	//keep the latest PORTB input
 34c:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <lastInput>
		}
		OLED_display();	//update OLED display
 350:	0e 94 36 01 	call	0x26c	; 0x26c <OLED_display>
	}
 354:	cc cf       	rjmp	.-104    	; 0x2ee <main+0xe>

00000356 <oledSendStart>:
{
    if(lineNumber<8)
    {   /* If the line number is within range
         then move it to specified line and keep track*/
        OledLineNum = lineNumber;
        OLED_SetCursor(OledLineNum,0);
 356:	cf 93       	push	r28
 358:	c8 2f       	mov	r28, r24
 35a:	0e 94 2a 01 	call	0x254	; 0x254 <i2c_tx_start>
 35e:	8c 2f       	mov	r24, r28
 360:	0e 94 2d 01 	call	0x25a	; 0x25a <i2c_tx_address>
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <oledSendStop>:
 368:	0e 94 33 01 	call	0x266	; 0x266 <i2c_tx_stop>
 36c:	08 95       	ret

0000036e <oledSendByte>:
 36e:	0e 94 30 01 	call	0x260	; 0x260 <i2c_tx_byte>
 372:	08 95       	ret

00000374 <oledSendCommand>:
 374:	cf 93       	push	r28
 376:	c8 2f       	mov	r28, r24
 378:	88 e7       	ldi	r24, 0x78	; 120
 37a:	0e 94 ab 01 	call	0x356	; 0x356 <oledSendStart>
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 b7 01 	call	0x36e	; 0x36e <oledSendByte>
 384:	8c 2f       	mov	r24, r28
 386:	0e 94 b7 01 	call	0x36e	; 0x36e <oledSendByte>
 38a:	0e 94 b4 01 	call	0x368	; 0x368 <oledSendStop>
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <OLED_Clear>:
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	81 e2       	ldi	r24, 0x21	; 33
 398:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 3a2:	8f e7       	ldi	r24, 0x7F	; 127
 3a4:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 3a8:	82 e2       	ldi	r24, 0x22	; 34
 3aa:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 3b4:	87 e0       	ldi	r24, 0x07	; 7
 3b6:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 3ba:	88 e7       	ldi	r24, 0x78	; 120
 3bc:	0e 94 ab 01 	call	0x356	; 0x356 <oledSendStart>
 3c0:	80 e4       	ldi	r24, 0x40	; 64
 3c2:	0e 94 b7 01 	call	0x36e	; 0x36e <oledSendByte>
 3c6:	c0 e0       	ldi	r28, 0x00	; 0
 3c8:	d0 e0       	ldi	r29, 0x00	; 0
 3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <OLED_Clear+0x42>
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 b7 01 	call	0x36e	; 0x36e <oledSendByte>
 3d2:	21 96       	adiw	r28, 0x01	; 1
 3d4:	c1 15       	cp	r28, r1
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	d8 07       	cpc	r29, r24
 3da:	c4 f3       	brlt	.-16     	; 0x3cc <OLED_Clear+0x3a>
 3dc:	81 e2       	ldi	r24, 0x21	; 33
 3de:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 3e8:	8f e7       	ldi	r24, 0x7F	; 127
 3ea:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 3ee:	82 e2       	ldi	r24, 0x22	; 34
 3f0:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 3fa:	87 e0       	ldi	r24, 0x07	; 7
 3fc:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 400:	88 e7       	ldi	r24, 0x78	; 120
 402:	0e 94 ab 01 	call	0x356	; 0x356 <oledSendStart>
 406:	80 e4       	ldi	r24, 0x40	; 64
 408:	0e 94 b7 01 	call	0x36e	; 0x36e <oledSendByte>
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <OLED_Init>:
 412:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <i2c_init>
 416:	8e ea       	ldi	r24, 0xAE	; 174
 418:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 41c:	85 ed       	ldi	r24, 0xD5	; 213
 41e:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 422:	80 e8       	ldi	r24, 0x80	; 128
 424:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 428:	88 ea       	ldi	r24, 0xA8	; 168
 42a:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 42e:	8f e3       	ldi	r24, 0x3F	; 63
 430:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 434:	83 ed       	ldi	r24, 0xD3	; 211
 436:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 440:	80 e4       	ldi	r24, 0x40	; 64
 442:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 446:	8d e8       	ldi	r24, 0x8D	; 141
 448:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 44c:	84 e1       	ldi	r24, 0x14	; 20
 44e:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 452:	80 e2       	ldi	r24, 0x20	; 32
 454:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 45e:	81 ea       	ldi	r24, 0xA1	; 161
 460:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 464:	88 ec       	ldi	r24, 0xC8	; 200
 466:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 46a:	8a ed       	ldi	r24, 0xDA	; 218
 46c:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 470:	82 e1       	ldi	r24, 0x12	; 18
 472:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 476:	81 e8       	ldi	r24, 0x81	; 129
 478:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 47c:	8f ec       	ldi	r24, 0xCF	; 207
 47e:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 482:	89 ed       	ldi	r24, 0xD9	; 217
 484:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 488:	81 ef       	ldi	r24, 0xF1	; 241
 48a:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 48e:	8b ed       	ldi	r24, 0xDB	; 219
 490:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 494:	80 e4       	ldi	r24, 0x40	; 64
 496:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 49a:	84 ea       	ldi	r24, 0xA4	; 164
 49c:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 4a0:	86 ea       	ldi	r24, 0xA6	; 166
 4a2:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 4a6:	8f ea       	ldi	r24, 0xAF	; 175
 4a8:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 4ac:	0e 94 c9 01 	call	0x392	; 0x392 <OLED_Clear>
 4b0:	08 95       	ret

000004b2 <OLED_SetCursor>:
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	88 30       	cpi	r24, 0x08	; 8
 4b8:	00 f5       	brcc	.+64     	; 0x4fa <OLED_SetCursor+0x48>
 4ba:	66 23       	and	r22, r22
 4bc:	f4 f0       	brlt	.+60     	; 0x4fa <OLED_SetCursor+0x48>
 4be:	d6 2f       	mov	r29, r22
 4c0:	c8 2f       	mov	r28, r24
 4c2:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <OledLineNum>
 4c6:	60 93 0e 03 	sts	0x030E, r22	; 0x80030e <OledCursorPos>
 4ca:	81 e2       	ldi	r24, 0x21	; 33
 4cc:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 4d0:	8d 2f       	mov	r24, r29
 4d2:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 4d6:	8f e7       	ldi	r24, 0x7F	; 127
 4d8:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 4dc:	82 e2       	ldi	r24, 0x22	; 34
 4de:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 4e2:	8c 2f       	mov	r24, r28
 4e4:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 4e8:	87 e0       	ldi	r24, 0x07	; 7
 4ea:	0e 94 ba 01 	call	0x374	; 0x374 <oledSendCommand>
 4ee:	88 e7       	ldi	r24, 0x78	; 120
 4f0:	0e 94 ab 01 	call	0x356	; 0x356 <oledSendStart>
 4f4:	80 e4       	ldi	r24, 0x40	; 64
 4f6:	0e 94 b7 01 	call	0x36e	; 0x36e <oledSendByte>
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <OLED_GoToNextLine>:
 ****************************************************************************************************/
void  OLED_GoToNextLine()
{
    /*Increment the current line number.
     In case it exceeds the limit, rool it back to first line */
    OledLineNum++;
 500:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <OledLineNum>
 504:	8f 5f       	subi	r24, 0xFF	; 255
    OledLineNum = OledLineNum&0x07;
 506:	87 70       	andi	r24, 0x07	; 7
 508:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <OledLineNum>
    OLED_SetCursor(OledLineNum,0); /* Finally move it to next line */
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <OLED_SetCursor>
 512:	08 95       	ret

00000514 <OLED_DisplayChar>:
 * Return value    : none
 * description  : This function sends a character to be displayed on LCD.
 Any valid ascii value can be passed to display respective character
 ****************************************************************************************************/
void OLED_DisplayChar(uint8_t ch)
{
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	d8 2f       	mov	r29, r24
    uint8_t dat,i=0;
    
    if(((OledCursorPos+FONT_SIZE)>=128) || (ch=='\n'))
 51a:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <OledCursorPos>
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	05 96       	adiw	r24, 0x05	; 5
 522:	80 38       	cpi	r24, 0x80	; 128
 524:	91 05       	cpc	r25, r1
 526:	14 f4       	brge	.+4      	; 0x52c <OLED_DisplayChar+0x18>
 528:	da 30       	cpi	r29, 0x0A	; 10
 52a:	11 f4       	brne	.+4      	; 0x530 <OLED_DisplayChar+0x1c>
    {
        /* If the cursor has reached to end of line on page1
         OR NewLine command is issued Then Move the cursor to next line */
        OLED_GoToNextLine();
 52c:	0e 94 80 02 	call	0x500	; 0x500 <OLED_GoToNextLine>
    }
    if(ch!='\n') /* TODO */
 530:	da 30       	cpi	r29, 0x0A	; 10
 532:	11 f1       	breq	.+68     	; 0x578 <OLED_DisplayChar+0x64>
    {
        ch = ch-0x20; // As the lookup table starts from Space(0x20)
 534:	d0 52       	subi	r29, 0x20	; 32
 * description  : This function sends a character to be displayed on LCD.
 Any valid ascii value can be passed to display respective character
 ****************************************************************************************************/
void OLED_DisplayChar(uint8_t ch)
{
    uint8_t dat,i=0;
 536:	c0 e0       	ldi	r28, 0x00	; 0
    {
        ch = ch-0x20; // As the lookup table starts from Space(0x20)
        
        while(1)
        {
            dat= OledFontTable[ch][i]; /* Get the data to be displayed for LookUptable*/
 538:	2d 2f       	mov	r18, r29
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	f9 01       	movw	r30, r18
 53e:	ee 0f       	add	r30, r30
 540:	ff 1f       	adc	r31, r31
 542:	ee 0f       	add	r30, r30
 544:	ff 1f       	adc	r31, r31
 546:	e2 0f       	add	r30, r18
 548:	f3 1f       	adc	r31, r19
 54a:	e4 5d       	subi	r30, 0xD4	; 212
 54c:	fe 4f       	sbci	r31, 0xFE	; 254
 54e:	ec 0f       	add	r30, r28
 550:	f1 1d       	adc	r31, r1
            
            
            oledSendByte(dat); /* Display the data and keep track of cursor */
 552:	80 81       	ld	r24, Z
 554:	0e 94 b7 01 	call	0x36e	; 0x36e <oledSendByte>
            OledCursorPos++;
 558:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <OledCursorPos>
 55c:	9f 5f       	subi	r25, 0xFF	; 255
 55e:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <OledCursorPos>
            
            i++;
 562:	cf 5f       	subi	r28, 0xFF	; 255
            
            if(i==FONT_SIZE) /* Exit the loop if End of char is encountered */
 564:	c5 30       	cpi	r28, 0x05	; 5
 566:	41 f7       	brne	.-48     	; 0x538 <OLED_DisplayChar+0x24>
            {
                oledSendByte(0x00); /* Display the data and keep track of cursor */
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	0e 94 b7 01 	call	0x36e	; 0x36e <oledSendByte>
                OledCursorPos++;
 56e:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <OledCursorPos>
 572:	8f 5f       	subi	r24, 0xFF	; 255
 574:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <OledCursorPos>
                break;
            }
        }
    }
}
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	08 95       	ret

0000057e <OLED_DisplayString>:
 1.The ptr_stringPointer_u8 points to the first char of the string
 and traverses till the end(NULL CHAR)and displays a char each time.
 ****************************************************************************************************/
#if(Enable_OLED_DisplayString==1)
void OLED_DisplayString(char *ptr)
{
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	ec 01       	movw	r28, r24
    while(*ptr)
 584:	03 c0       	rjmp	.+6      	; 0x58c <OLED_DisplayString+0xe>
        OLED_DisplayChar(*ptr++);
 586:	21 96       	adiw	r28, 0x01	; 1
 588:	0e 94 8a 02 	call	0x514	; 0x514 <OLED_DisplayChar>
 and traverses till the end(NULL CHAR)and displays a char each time.
 ****************************************************************************************************/
#if(Enable_OLED_DisplayString==1)
void OLED_DisplayString(char *ptr)
{
    while(*ptr)
 58c:	88 81       	ld	r24, Y
 58e:	81 11       	cpse	r24, r1
 590:	fa cf       	rjmp	.-12     	; 0x586 <OLED_DisplayString+0x8>
        OLED_DisplayChar(*ptr++);
}
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	08 95       	ret

00000598 <OLED_DisplayNumber>:
 8.(C_HEX_U8,0x12AB,6) then 6-digits ie. 0012AB will be displayed
 9.(C_HEX_U8,0x12AB,C_DisplayDefaultDigits_U8) then 12AB will be displayed.
 ****************************************************************************************************/
#if ((Enable_OLED_DisplayNumber == 1) || (Enable_OLED_DisplayFloatNumber == 1) || (Enable_OLED_Printf==1))
void OLED_DisplayNumber(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigitsToDisplay_u8)
{
 598:	4f 92       	push	r4
 59a:	5f 92       	push	r5
 59c:	6f 92       	push	r6
 59e:	7f 92       	push	r7
 5a0:	af 92       	push	r10
 5a2:	bf 92       	push	r11
 5a4:	cf 92       	push	r12
 5a6:	df 92       	push	r13
 5a8:	ef 92       	push	r14
 5aa:	ff 92       	push	r15
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	cd b7       	in	r28, 0x3d	; 61
 5b6:	de b7       	in	r29, 0x3e	; 62
 5b8:	2a 97       	sbiw	r28, 0x0a	; 10
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	f8 94       	cli
 5be:	de bf       	out	0x3e, r29	; 62
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	cd bf       	out	0x3d, r28	; 61
 5c4:	a8 2e       	mov	r10, r24
 5c6:	6a 01       	movw	r12, r20
 5c8:	7b 01       	movw	r14, r22
 5ca:	02 2f       	mov	r16, r18
    uint8_t i=0,a[10];
    
    if(C_BINARY_U8 == v_numericSystem_u8)
 5cc:	82 e0       	ldi	r24, 0x02	; 2
 5ce:	a8 12       	cpse	r10, r24
 5d0:	20 c0       	rjmp	.+64     	; 0x612 <OLED_DisplayNumber+0x7a>
 5d2:	1c c0       	rjmp	.+56     	; 0x60c <OLED_DisplayNumber+0x74>
    {
        while(v_numOfDigitsToDisplay_u8!=0)
        {
            /* Start Extracting the bits from the specified bit positions.
             Get the Acsii values of the bits and display */
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
 5d4:	80 2f       	mov	r24, r16
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	41 e0       	ldi	r20, 0x01	; 1
 5dc:	50 e0       	ldi	r21, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <OLED_DisplayNumber+0x4c>
 5e0:	44 0f       	add	r20, r20
 5e2:	55 1f       	adc	r21, r21
 5e4:	8a 95       	dec	r24
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <OLED_DisplayNumber+0x48>
 5e8:	05 2e       	mov	r0, r21
 5ea:	00 0c       	add	r0, r0
 5ec:	66 0b       	sbc	r22, r22
 5ee:	77 0b       	sbc	r23, r23
 5f0:	4c 21       	and	r20, r12
 5f2:	5d 21       	and	r21, r13
 5f4:	6e 21       	and	r22, r14
 5f6:	7f 21       	and	r23, r15
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	45 2b       	or	r20, r21
 5fc:	46 2b       	or	r20, r22
 5fe:	47 2b       	or	r20, r23
 600:	09 f4       	brne	.+2      	; 0x604 <OLED_DisplayNumber+0x6c>
 602:	80 e0       	ldi	r24, 0x00	; 0
            OLED_DisplayChar(util_Dec2Ascii(i));
 604:	80 5d       	subi	r24, 0xD0	; 208
 606:	0e 94 8a 02 	call	0x514	; 0x514 <OLED_DisplayChar>
            v_numOfDigitsToDisplay_u8--;
 60a:	01 50       	subi	r16, 0x01	; 1
{
    uint8_t i=0,a[10];
    
    if(C_BINARY_U8 == v_numericSystem_u8)
    {
        while(v_numOfDigitsToDisplay_u8!=0)
 60c:	01 11       	cpse	r16, r1
 60e:	e2 cf       	rjmp	.-60     	; 0x5d4 <OLED_DisplayNumber+0x3c>
 610:	52 c0       	rjmp	.+164    	; 0x6b6 <OLED_DisplayNumber+0x11e>
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToDisplay_u8-1));
            OLED_DisplayChar(util_Dec2Ascii(i));
            v_numOfDigitsToDisplay_u8--;
        }
    }
    else if(v_number_u32==0)
 612:	45 2b       	or	r20, r21
 614:	46 2b       	or	r20, r22
 616:	47 2b       	or	r20, r23
 618:	39 f0       	breq	.+14     	; 0x628 <OLED_DisplayNumber+0x90>
 61a:	10 e0       	ldi	r17, 0x00	; 0
 61c:	35 c0       	rjmp	.+106    	; 0x688 <OLED_DisplayNumber+0xf0>
    {
        /* If the number is zero then update the array with the same for displaying */
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            OLED_DisplayChar('0');
 61e:	80 e3       	ldi	r24, 0x30	; 48
 620:	0e 94 8a 02 	call	0x514	; 0x514 <OLED_DisplayChar>
        }
    }
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for displaying */
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
 624:	1f 5f       	subi	r17, 0xFF	; 255
 626:	01 c0       	rjmp	.+2      	; 0x62a <OLED_DisplayNumber+0x92>
 628:	10 e0       	ldi	r17, 0x00	; 0
 62a:	10 17       	cp	r17, r16
 62c:	08 f0       	brcs	.+2      	; 0x630 <OLED_DisplayNumber+0x98>
 62e:	43 c0       	rjmp	.+134    	; 0x6b6 <OLED_DisplayNumber+0x11e>
 630:	1a 30       	cpi	r17, 0x0A	; 10
 632:	a8 f3       	brcs	.-22     	; 0x61e <OLED_DisplayNumber+0x86>
 634:	40 c0       	rjmp	.+128    	; 0x6b6 <OLED_DisplayNumber+0x11e>
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
        {
            /* Continue extracting the digits from right side
             till the Specified v_numOfDigitsToDisplay_u8 */
            if(v_number_u32!=0)
 636:	c1 14       	cp	r12, r1
 638:	d1 04       	cpc	r13, r1
 63a:	e1 04       	cpc	r14, r1
 63c:	f1 04       	cpc	r15, r1
 63e:	d1 f0       	breq	.+52     	; 0x674 <OLED_DisplayNumber+0xdc>
                /* Extract the digits from the number till it becomes zero.
                 First get the remainder and divide the number by TypeOfNum(10-Dec, 16-Hex) each time.
                 example for Decimal number:
                 If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                 The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
 640:	bc 2c       	mov	r11, r12
 642:	4a 2c       	mov	r4, r10
 644:	51 2c       	mov	r5, r1
 646:	61 2c       	mov	r6, r1
 648:	71 2c       	mov	r7, r1
 64a:	c7 01       	movw	r24, r14
 64c:	b6 01       	movw	r22, r12
 64e:	a3 01       	movw	r20, r6
 650:	92 01       	movw	r18, r4
 652:	0e 94 54 06 	call	0xca8	; 0xca8 <__udivmodsi4>
 656:	c2 2e       	mov	r12, r18
 658:	d3 2e       	mov	r13, r19
 65a:	e4 2e       	mov	r14, r20
 65c:	f5 2e       	mov	r15, r21
 65e:	e1 e0       	ldi	r30, 0x01	; 1
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	ec 0f       	add	r30, r28
 664:	fd 1f       	adc	r31, r29
 666:	e1 0f       	add	r30, r17
 668:	f1 1d       	adc	r31, r1
 66a:	a2 9e       	mul	r10, r18
 66c:	b0 18       	sub	r11, r0
 66e:	11 24       	eor	r1, r1
 670:	b0 82       	st	Z, r11
 672:	09 c0       	rjmp	.+18     	; 0x686 <OLED_DisplayNumber+0xee>
                v_number_u32=v_number_u32/v_numericSystem_u8;
            }
            else if( (v_numOfDigitsToDisplay_u8 == C_DisplayDefaultDigits_U8) ||
 674:	0b 30       	cpi	r16, 0x0B	; 11
 676:	e8 f4       	brcc	.+58     	; 0x6b2 <OLED_DisplayNumber+0x11a>
            else
            {
                /* In case user expects more digits to be displayed than the actual digits in number,
                 then update the remaining digits with zero.
                 Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
 678:	e1 e0       	ldi	r30, 0x01	; 1
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	ec 0f       	add	r30, r28
 67e:	fd 1f       	adc	r31, r29
 680:	e1 0f       	add	r30, r17
 682:	f1 1d       	adc	r31, r1
 684:	10 82       	st	Z, r1
        for(i=0;((i<v_numOfDigitsToDisplay_u8) && (i<C_MaxDigitsToDisplay_U8));i++)
            OLED_DisplayChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigitsToDisplay_u8;i++)
 686:	1f 5f       	subi	r17, 0xFF	; 255
 688:	10 17       	cp	r17, r16
 68a:	a8 f2       	brcs	.-86     	; 0x636 <OLED_DisplayNumber+0x9e>
 68c:	12 c0       	rjmp	.+36     	; 0x6b2 <OLED_DisplayNumber+0x11a>
        }
        
        while(i!=0)
        {
            /* Finally get the ascii values of the digits and display*/
            OLED_DisplayChar(util_Hex2Ascii(a[i-1]));
 68e:	e1 2f       	mov	r30, r17
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	31 97       	sbiw	r30, 0x01	; 1
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	8c 0f       	add	r24, r28
 69a:	9d 1f       	adc	r25, r29
 69c:	e8 0f       	add	r30, r24
 69e:	f9 1f       	adc	r31, r25
 6a0:	80 81       	ld	r24, Z
 6a2:	8a 30       	cpi	r24, 0x0A	; 10
 6a4:	10 f0       	brcs	.+4      	; 0x6aa <OLED_DisplayNumber+0x112>
 6a6:	89 5c       	subi	r24, 0xC9	; 201
 6a8:	01 c0       	rjmp	.+2      	; 0x6ac <OLED_DisplayNumber+0x114>
 6aa:	80 5d       	subi	r24, 0xD0	; 208
 6ac:	0e 94 8a 02 	call	0x514	; 0x514 <OLED_DisplayChar>
            i--;
 6b0:	11 50       	subi	r17, 0x01	; 1
                 Ex: v_num_u32 is 123 and user wants five digits then 00123 has to be displayed */
                a[i]=0;
            }
        }
        
        while(i!=0)
 6b2:	11 11       	cpse	r17, r1
 6b4:	ec cf       	rjmp	.-40     	; 0x68e <OLED_DisplayNumber+0xf6>
            /* Finally get the ascii values of the digits and display*/
            OLED_DisplayChar(util_Hex2Ascii(a[i-1]));
            i--;
        }
    }
}
 6b6:	2a 96       	adiw	r28, 0x0a	; 10
 6b8:	0f b6       	in	r0, 0x3f	; 63
 6ba:	f8 94       	cli
 6bc:	de bf       	out	0x3e, r29	; 62
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	cd bf       	out	0x3d, r28	; 61
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	ff 90       	pop	r15
 6cc:	ef 90       	pop	r14
 6ce:	df 90       	pop	r13
 6d0:	cf 90       	pop	r12
 6d2:	bf 90       	pop	r11
 6d4:	af 90       	pop	r10
 6d6:	7f 90       	pop	r7
 6d8:	6f 90       	pop	r6
 6da:	5f 90       	pop	r5
 6dc:	4f 90       	pop	r4
 6de:	08 95       	ret

000006e0 <OLED_DisplayFloatNumber>:
 Note: Float will be disabled by default as it takes huge controller resources
 It can be enabled by changing value of Enable_OLED_DisplayFloatNumber to 1 in lcd.h
 ***************************************************************************************************/
#if (Enable_OLED_DisplayFloatNumber == 1)
void OLED_DisplayFloatNumber(double v_floatNum_f32)
{
 6e0:	8f 92       	push	r8
 6e2:	9f 92       	push	r9
 6e4:	af 92       	push	r10
 6e6:	bf 92       	push	r11
 6e8:	cf 92       	push	r12
 6ea:	df 92       	push	r13
 6ec:	ef 92       	push	r14
 6ee:	ff 92       	push	r15
 6f0:	6b 01       	movw	r12, r22
 6f2:	7c 01       	movw	r14, r24
     1.Type cast the number to int to get the integer part.
     2.Display the extracted integer part followed by a decimal point(.)
     3.Later the integer part is made zero by subtracting with the extracted integer value.
     4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */
    
    v_temp_u32 = (uint32_t) v_floatNum_f32;
 6f4:	0e 94 2a 05 	call	0xa54	; 0xa54 <__fixunssfsi>
 6f8:	4b 01       	movw	r8, r22
 6fa:	5c 01       	movw	r10, r24
    OLED_DisplayNumber(C_DECIMAL_U8,v_temp_u32,C_DisplayDefaultDigits_U8);
 6fc:	2f ef       	ldi	r18, 0xFF	; 255
 6fe:	ab 01       	movw	r20, r22
 700:	bc 01       	movw	r22, r24
 702:	8a e0       	ldi	r24, 0x0A	; 10
 704:	0e 94 cc 02 	call	0x598	; 0x598 <OLED_DisplayNumber>
    
    OLED_DisplayChar('.');
 708:	8e e2       	ldi	r24, 0x2E	; 46
 70a:	0e 94 8a 02 	call	0x514	; 0x514 <OLED_DisplayChar>
    
    v_floatNum_f32 = v_floatNum_f32 - v_temp_u32;
 70e:	c5 01       	movw	r24, r10
 710:	b4 01       	movw	r22, r8
 712:	0e 94 59 05 	call	0xab2	; 0xab2 <__floatunsisf>
 716:	9b 01       	movw	r18, r22
 718:	ac 01       	movw	r20, r24
 71a:	c7 01       	movw	r24, r14
 71c:	b6 01       	movw	r22, r12
 71e:	0e 94 bd 04 	call	0x97a	; 0x97a <__subsf3>
    v_temp_u32 = v_floatNum_f32 * 1000000;
 722:	20 e0       	ldi	r18, 0x00	; 0
 724:	34 e2       	ldi	r19, 0x24	; 36
 726:	44 e7       	ldi	r20, 0x74	; 116
 728:	59 e4       	ldi	r21, 0x49	; 73
 72a:	0e 94 e7 05 	call	0xbce	; 0xbce <__mulsf3>
 72e:	0e 94 2a 05 	call	0xa54	; 0xa54 <__fixunssfsi>
 732:	ab 01       	movw	r20, r22
 734:	bc 01       	movw	r22, r24
    OLED_DisplayNumber(C_DECIMAL_U8,v_temp_u32,C_DisplayDefaultDigits_U8);
 736:	2f ef       	ldi	r18, 0xFF	; 255
 738:	8a e0       	ldi	r24, 0x0A	; 10
 73a:	0e 94 cc 02 	call	0x598	; 0x598 <OLED_DisplayNumber>
}
 73e:	ff 90       	pop	r15
 740:	ef 90       	pop	r14
 742:	df 90       	pop	r13
 744:	cf 90       	pop	r12
 746:	bf 90       	pop	r11
 748:	af 90       	pop	r10
 74a:	9f 90       	pop	r9
 74c:	8f 90       	pop	r8
 74e:	08 95       	ret

00000750 <OLED_Printf>:
 uint8_t v_Num_u8;
 OLED_Printf("num1:%u",(uint16_t)v_Num_u8);
 **************************************************************************************************/
#if ( Enable_OLED_Printf == 1 )
void OLED_Printf(const char *argList, ...)
{
 750:	4f 92       	push	r4
 752:	5f 92       	push	r5
 754:	6f 92       	push	r6
 756:	7f 92       	push	r7
 758:	af 92       	push	r10
 75a:	bf 92       	push	r11
 75c:	ef 92       	push	r14
 75e:	ff 92       	push	r15
 760:	1f 93       	push	r17
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
 766:	cd b7       	in	r28, 0x3d	; 61
 768:	de b7       	in	r29, 0x3e	; 62
 76a:	fe 01       	movw	r30, r28
 76c:	3e 96       	adiw	r30, 0x0e	; 14
 76e:	e1 90       	ld	r14, Z+
 770:	f1 90       	ld	r15, Z+
    uint8_t v_numOfDigitsToDisp_u8;
#if (Enable_OLED_DisplayFloatNumber == 1)
    double v_floatNum_f32;
#endif
    
    va_start(argp, argList);
 772:	3f 01       	movw	r6, r30
    
    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
 774:	f2 c0       	rjmp	.+484    	; 0x95a <__stack+0x5b>
    {
        
        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
 776:	85 32       	cpi	r24, 0x25	; 37
 778:	09 f0       	breq	.+2      	; 0x77c <OLED_Printf+0x2c>
 77a:	ea c0       	rjmp	.+468    	; 0x950 <__stack+0x51>
        {
            ptr++;
 77c:	c7 01       	movw	r24, r14
 77e:	01 96       	adiw	r24, 0x01	; 1
            ch = *ptr;
 780:	d7 01       	movw	r26, r14
 782:	11 96       	adiw	r26, 0x01	; 1
 784:	ec 91       	ld	r30, X
            if((ch>=0x30) && (ch<=0x39))
 786:	20 ed       	ldi	r18, 0xD0	; 208
 788:	2e 0f       	add	r18, r30
 78a:	2a 30       	cpi	r18, 0x0A	; 10
 78c:	90 f0       	brcs	.+36     	; 0x7b2 <OLED_Printf+0x62>
    {
        
        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
        {
            ptr++;
 78e:	7c 01       	movw	r14, r24
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
 790:	1f ef       	ldi	r17, 0xFF	; 255
 792:	15 c0       	rjmp	.+42     	; 0x7be <OLED_Printf+0x6e>
            if((ch>=0x30) && (ch<=0x39))
            {
                v_numOfDigitsToDisp_u8 = 0;
                while((ch>=0x30) && (ch<=0x39))
                {
                    v_numOfDigitsToDisp_u8 = (v_numOfDigitsToDisp_u8 * 10) + (ch-0x30);
 794:	81 2f       	mov	r24, r17
 796:	88 0f       	add	r24, r24
 798:	98 2f       	mov	r25, r24
 79a:	99 0f       	add	r25, r25
 79c:	99 0f       	add	r25, r25
 79e:	89 0f       	add	r24, r25
 7a0:	8e 0f       	add	r24, r30
 7a2:	10 ed       	ldi	r17, 0xD0	; 208
 7a4:	18 0f       	add	r17, r24
                    ptr++;
 7a6:	bf ef       	ldi	r27, 0xFF	; 255
 7a8:	eb 1a       	sub	r14, r27
 7aa:	fb 0a       	sbc	r15, r27
                    ch = *ptr;
 7ac:	d7 01       	movw	r26, r14
 7ae:	ec 91       	ld	r30, X
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <OLED_Printf+0x66>
 7b2:	7c 01       	movw	r14, r24
 7b4:	10 e0       	ldi	r17, 0x00	; 0
            ptr++;
            ch = *ptr;
            if((ch>=0x30) && (ch<=0x39))
            {
                v_numOfDigitsToDisp_u8 = 0;
                while((ch>=0x30) && (ch<=0x39))
 7b6:	80 ed       	ldi	r24, 0xD0	; 208
 7b8:	8e 0f       	add	r24, r30
 7ba:	8a 30       	cpi	r24, 0x0A	; 10
 7bc:	58 f3       	brcs	.-42     	; 0x794 <OLED_Printf+0x44>
            {
                v_numOfDigitsToDisp_u8 = C_MaxDigitsToDisplayUsingPrintf_U8;
            }
            
            
            switch(ch)       /* Decode the type of the argument */
 7be:	8e 2f       	mov	r24, r30
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	fc 01       	movw	r30, r24
 7c4:	b5 97       	sbiw	r30, 0x25	; 37
 7c6:	e4 35       	cpi	r30, 0x54	; 84
 7c8:	f1 05       	cpc	r31, r1
 7ca:	08 f0       	brcs	.+2      	; 0x7ce <OLED_Printf+0x7e>
 7cc:	c3 c0       	rjmp	.+390    	; 0x954 <__stack+0x55>
 7ce:	ea 59       	subi	r30, 0x9A	; 154
 7d0:	ff 4f       	sbci	r31, 0xFF	; 255
 7d2:	0c 94 76 06 	jmp	0xcec	; 0xcec <__tablejump2__>
            {
                case 'C':
                case 'c':     /* Argument type is of char, hence read char data from the argp */
                    ch = va_arg(argp, int);
 7d6:	53 01       	movw	r10, r6
 7d8:	b2 e0       	ldi	r27, 0x02	; 2
 7da:	ab 0e       	add	r10, r27
 7dc:	b1 1c       	adc	r11, r1
                    OLED_DisplayChar(ch);
 7de:	f3 01       	movw	r30, r6
 7e0:	80 81       	ld	r24, Z
 7e2:	0e 94 8a 02 	call	0x514	; 0x514 <OLED_DisplayChar>
            
            switch(ch)       /* Decode the type of the argument */
            {
                case 'C':
                case 'c':     /* Argument type is of char, hence read char data from the argp */
                    ch = va_arg(argp, int);
 7e6:	35 01       	movw	r6, r10
                    OLED_DisplayChar(ch);
                    break;
 7e8:	b5 c0       	rjmp	.+362    	; 0x954 <__stack+0x55>
                    
                case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
                    v_num_s16 = va_arg(argp, int);
 7ea:	53 01       	movw	r10, r6
 7ec:	f2 e0       	ldi	r31, 0x02	; 2
 7ee:	af 0e       	add	r10, r31
 7f0:	b1 1c       	adc	r11, r1
 7f2:	d3 01       	movw	r26, r6
 7f4:	6d 90       	ld	r6, X+
 7f6:	7c 90       	ld	r7, X
                    if(v_num_s16<0)
 7f8:	77 20       	and	r7, r7
 7fa:	34 f4       	brge	.+12     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s16 = -v_num_s16;
 7fc:	71 94       	neg	r7
 7fe:	61 94       	neg	r6
 800:	71 08       	sbc	r7, r1
                        OLED_DisplayChar('-');
 802:	8d e2       	ldi	r24, 0x2D	; 45
 804:	0e 94 8a 02 	call	0x514	; 0x514 <OLED_DisplayChar>
                    }
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
 808:	a3 01       	movw	r20, r6
 80a:	77 0c       	add	r7, r7
 80c:	66 0b       	sbc	r22, r22
 80e:	77 0b       	sbc	r23, r23
 810:	21 2f       	mov	r18, r17
 812:	8a e0       	ldi	r24, 0x0A	; 10
 814:	0e 94 cc 02 	call	0x598	; 0x598 <OLED_DisplayNumber>
                    ch = va_arg(argp, int);
                    OLED_DisplayChar(ch);
                    break;
                    
                case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
                    v_num_s16 = va_arg(argp, int);
 818:	35 01       	movw	r6, r10
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s16 = -v_num_s16;
                        OLED_DisplayChar('-');
                    }
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
                    break;
 81a:	9c c0       	rjmp	.+312    	; 0x954 <__stack+0x55>
                    
                case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
                    v_num_s32 = va_arg(argp, sint32_t);
 81c:	53 01       	movw	r10, r6
 81e:	b4 e0       	ldi	r27, 0x04	; 4
 820:	ab 0e       	add	r10, r27
 822:	b1 1c       	adc	r11, r1
 824:	f3 01       	movw	r30, r6
 826:	40 80       	ld	r4, Z
 828:	51 80       	ldd	r5, Z+1	; 0x01
 82a:	62 80       	ldd	r6, Z+2	; 0x02
 82c:	73 80       	ldd	r7, Z+3	; 0x03
                    if(v_num_s32<0)
 82e:	77 20       	and	r7, r7
 830:	5c f4       	brge	.+22     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s32 = -v_num_s32;
 832:	70 94       	com	r7
 834:	60 94       	com	r6
 836:	50 94       	com	r5
 838:	40 94       	com	r4
 83a:	41 1c       	adc	r4, r1
 83c:	51 1c       	adc	r5, r1
 83e:	61 1c       	adc	r6, r1
 840:	71 1c       	adc	r7, r1
                        OLED_DisplayChar('-');
 842:	8d e2       	ldi	r24, 0x2D	; 45
 844:	0e 94 8a 02 	call	0x514	; 0x514 <OLED_DisplayChar>
                    }
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
 848:	21 2f       	mov	r18, r17
 84a:	b3 01       	movw	r22, r6
 84c:	a2 01       	movw	r20, r4
 84e:	8a e0       	ldi	r24, 0x0A	; 10
 850:	0e 94 cc 02 	call	0x598	; 0x598 <OLED_DisplayNumber>
                    }
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
                    v_num_s32 = va_arg(argp, sint32_t);
 854:	35 01       	movw	r6, r10
                    { /* If the number is -ve then display the 2's complement along with '-' sign */
                        v_num_s32 = -v_num_s32;
                        OLED_DisplayChar('-');
                    }
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
                    break;
 856:	7e c0       	rjmp	.+252    	; 0x954 <__stack+0x55>
                    
                case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
                    v_num_u16 = va_arg(argp, int);
 858:	53 01       	movw	r10, r6
 85a:	f2 e0       	ldi	r31, 0x02	; 2
 85c:	af 0e       	add	r10, r31
 85e:	b1 1c       	adc	r11, r1
 860:	d3 01       	movw	r26, r6
 862:	4d 91       	ld	r20, X+
 864:	5c 91       	ld	r21, X
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	70 e0       	ldi	r23, 0x00	; 0
 86a:	21 2f       	mov	r18, r17
 86c:	8a e0       	ldi	r24, 0x0A	; 10
 86e:	0e 94 cc 02 	call	0x598	; 0x598 <OLED_DisplayNumber>
                    }
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
                    v_num_u16 = va_arg(argp, int);
 872:	35 01       	movw	r6, r10
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
 874:	6f c0       	rjmp	.+222    	; 0x954 <__stack+0x55>
                    
                case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
                    v_num_u32 = va_arg(argp, uint32_t);
 876:	53 01       	movw	r10, r6
 878:	b4 e0       	ldi	r27, 0x04	; 4
 87a:	ab 0e       	add	r10, r27
 87c:	b1 1c       	adc	r11, r1
 87e:	f3 01       	movw	r30, r6
 880:	40 81       	ld	r20, Z
 882:	51 81       	ldd	r21, Z+1	; 0x01
 884:	62 81       	ldd	r22, Z+2	; 0x02
 886:	73 81       	ldd	r23, Z+3	; 0x03
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 888:	21 2f       	mov	r18, r17
 88a:	8a e0       	ldi	r24, 0x0A	; 10
 88c:	0e 94 cc 02 	call	0x598	; 0x598 <OLED_DisplayNumber>
                    v_num_u16 = va_arg(argp, int);
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
                    v_num_u32 = va_arg(argp, uint32_t);
 890:	35 01       	movw	r6, r10
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
 892:	60 c0       	rjmp	.+192    	; 0x954 <__stack+0x55>
                    
                case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u16 = va_arg(argp, int);
 894:	53 01       	movw	r10, r6
 896:	f2 e0       	ldi	r31, 0x02	; 2
 898:	af 0e       	add	r10, r31
 89a:	b1 1c       	adc	r11, r1
 89c:	d3 01       	movw	r26, r6
 89e:	4d 91       	ld	r20, X+
 8a0:	5c 91       	ld	r21, X
                    OLED_DisplayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	70 e0       	ldi	r23, 0x00	; 0
 8a6:	21 2f       	mov	r18, r17
 8a8:	80 e1       	ldi	r24, 0x10	; 16
 8aa:	0e 94 cc 02 	call	0x598	; 0x598 <OLED_DisplayNumber>
                    v_num_u32 = va_arg(argp, uint32_t);
                    OLED_DisplayNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u16 = va_arg(argp, int);
 8ae:	35 01       	movw	r6, r10
                    OLED_DisplayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
 8b0:	51 c0       	rjmp	.+162    	; 0x954 <__stack+0x55>
                    
                case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u32 = va_arg(argp, uint32_t);
 8b2:	53 01       	movw	r10, r6
 8b4:	b4 e0       	ldi	r27, 0x04	; 4
 8b6:	ab 0e       	add	r10, r27
 8b8:	b1 1c       	adc	r11, r1
 8ba:	f3 01       	movw	r30, r6
 8bc:	40 81       	ld	r20, Z
 8be:	51 81       	ldd	r21, Z+1	; 0x01
 8c0:	62 81       	ldd	r22, Z+2	; 0x02
 8c2:	73 81       	ldd	r23, Z+3	; 0x03
                    OLED_DisplayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 8c4:	21 2f       	mov	r18, r17
 8c6:	80 e1       	ldi	r24, 0x10	; 16
 8c8:	0e 94 cc 02 	call	0x598	; 0x598 <OLED_DisplayNumber>
                    v_num_u16 = va_arg(argp, int);
                    OLED_DisplayNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
                    v_num_u32 = va_arg(argp, uint32_t);
 8cc:	35 01       	movw	r6, r10
                    OLED_DisplayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
 8ce:	42 c0       	rjmp	.+132    	; 0x954 <__stack+0x55>
                    
                    
                case 'b':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u16 = va_arg(argp, int);
 8d0:	53 01       	movw	r10, r6
 8d2:	f2 e0       	ldi	r31, 0x02	; 2
 8d4:	af 0e       	add	r10, r31
 8d6:	b1 1c       	adc	r11, r1
 8d8:	d3 01       	movw	r26, r6
 8da:	4d 91       	ld	r20, X+
 8dc:	5c 91       	ld	r21, X
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
 8de:	1f 3f       	cpi	r17, 0xFF	; 255
 8e0:	09 f4       	brne	.+2      	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
                        v_numOfDigitsToDisp_u8 = 16;
 8e2:	10 e1       	ldi	r17, 0x10	; 16
                    OLED_DisplayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
 8e4:	60 e0       	ldi	r22, 0x00	; 0
 8e6:	70 e0       	ldi	r23, 0x00	; 0
 8e8:	21 2f       	mov	r18, r17
 8ea:	82 e0       	ldi	r24, 0x02	; 2
 8ec:	0e 94 cc 02 	call	0x598	; 0x598 <OLED_DisplayNumber>
                    OLED_DisplayNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
                    
                    
                case 'b':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u16 = va_arg(argp, int);
 8f0:	35 01       	movw	r6, r10
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                        v_numOfDigitsToDisp_u8 = 16;
                    OLED_DisplayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
 8f2:	30 c0       	rjmp	.+96     	; 0x954 <__stack+0x55>
                    
                case 'B':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u32 = va_arg(argp, uint32_t);
 8f4:	53 01       	movw	r10, r6
 8f6:	b4 e0       	ldi	r27, 0x04	; 4
 8f8:	ab 0e       	add	r10, r27
 8fa:	b1 1c       	adc	r11, r1
 8fc:	f3 01       	movw	r30, r6
 8fe:	40 81       	ld	r20, Z
 900:	51 81       	ldd	r21, Z+1	; 0x01
 902:	62 81       	ldd	r22, Z+2	; 0x02
 904:	73 81       	ldd	r23, Z+3	; 0x03
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
 906:	1f 3f       	cpi	r17, 0xFF	; 255
 908:	09 f4       	brne	.+2      	; 0x90c <__stack+0xd>
                        v_numOfDigitsToDisp_u8 = 16;
 90a:	10 e1       	ldi	r17, 0x10	; 16
                    OLED_DisplayNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToDisp_u8);
 90c:	21 2f       	mov	r18, r17
 90e:	82 e0       	ldi	r24, 0x02	; 2
 910:	0e 94 cc 02 	call	0x598	; 0x598 <OLED_DisplayNumber>
                        v_numOfDigitsToDisp_u8 = 16;
                    OLED_DisplayNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToDisp_u8);
                    break;
                    
                case 'B':  /* Argument type is of binary,Read int and convert to binary */
                    v_num_u32 = va_arg(argp, uint32_t);
 914:	35 01       	movw	r6, r10
                    if(v_numOfDigitsToDisp_u8 == C_MaxDigitsToDisplayUsingPrintf_U8)
                        v_numOfDigitsToDisp_u8 = 16;
                    OLED_DisplayNumber(C_BINARY_U8,v_num_u32,v_numOfDigitsToDisp_u8);
                    break;
 916:	1e c0       	rjmp	.+60     	; 0x954 <__stack+0x55>
                    
                    
                case 'F':
                case 'f': /* Argument type is of float, hence read double data from the argp */
#if (Enable_OLED_DisplayFloatNumber == 1)
                    v_floatNum_f32 = va_arg(argp, double);
 918:	53 01       	movw	r10, r6
 91a:	f4 e0       	ldi	r31, 0x04	; 4
 91c:	af 0e       	add	r10, r31
 91e:	b1 1c       	adc	r11, r1
 920:	d3 01       	movw	r26, r6
 922:	6d 91       	ld	r22, X+
 924:	7d 91       	ld	r23, X+
 926:	8d 91       	ld	r24, X+
 928:	9c 91       	ld	r25, X
                    OLED_DisplayFloatNumber(v_floatNum_f32);
 92a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <OLED_DisplayFloatNumber>
                    
                    
                case 'F':
                case 'f': /* Argument type is of float, hence read double data from the argp */
#if (Enable_OLED_DisplayFloatNumber == 1)
                    v_floatNum_f32 = va_arg(argp, double);
 92e:	35 01       	movw	r6, r10
                    OLED_DisplayFloatNumber(v_floatNum_f32);
#endif
                    break;
 930:	11 c0       	rjmp	.+34     	; 0x954 <__stack+0x55>
                    
                    
                case 'S':
                case 's': /* Argument type is of string, hence get the pointer to sting passed */
                    str = va_arg(argp, char *);
 932:	53 01       	movw	r10, r6
 934:	b2 e0       	ldi	r27, 0x02	; 2
 936:	ab 0e       	add	r10, r27
 938:	b1 1c       	adc	r11, r1
                    OLED_DisplayString(str);
 93a:	f3 01       	movw	r30, r6
 93c:	80 81       	ld	r24, Z
 93e:	91 81       	ldd	r25, Z+1	; 0x01
 940:	0e 94 bf 02 	call	0x57e	; 0x57e <OLED_DisplayString>
                    break;
                    
                    
                case 'S':
                case 's': /* Argument type is of string, hence get the pointer to sting passed */
                    str = va_arg(argp, char *);
 944:	35 01       	movw	r6, r10
                    OLED_DisplayString(str);
                    break;
 946:	06 c0       	rjmp	.+12     	; 0x954 <__stack+0x55>
                    
                case '%':
                    OLED_DisplayChar('%');
 948:	85 e2       	ldi	r24, 0x25	; 37
 94a:	0e 94 8a 02 	call	0x514	; 0x514 <OLED_DisplayChar>
                    break;
 94e:	02 c0       	rjmp	.+4      	; 0x954 <__stack+0x55>
            }
        }
        else
        {
            /* As '%' is not detected display/transmit the char passed */
            OLED_DisplayChar(ch);
 950:	0e 94 8a 02 	call	0x514	; 0x514 <OLED_DisplayChar>
#endif
    
    va_start(argp, argList);
    
    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
 954:	ff ef       	ldi	r31, 0xFF	; 255
 956:	ef 1a       	sub	r14, r31
 958:	ff 0a       	sbc	r15, r31
 95a:	d7 01       	movw	r26, r14
 95c:	8c 91       	ld	r24, X
 95e:	81 11       	cpse	r24, r1
 960:	0a cf       	rjmp	.-492    	; 0x776 <OLED_Printf+0x26>
            OLED_DisplayChar(ch);
        }
    }
    
    va_end(argp);
}
 962:	df 91       	pop	r29
 964:	cf 91       	pop	r28
 966:	1f 91       	pop	r17
 968:	ff 90       	pop	r15
 96a:	ef 90       	pop	r14
 96c:	bf 90       	pop	r11
 96e:	af 90       	pop	r10
 970:	7f 90       	pop	r7
 972:	6f 90       	pop	r6
 974:	5f 90       	pop	r5
 976:	4f 90       	pop	r4
 978:	08 95       	ret

0000097a <__subsf3>:
 97a:	50 58       	subi	r21, 0x80	; 128

0000097c <__addsf3>:
 97c:	bb 27       	eor	r27, r27
 97e:	aa 27       	eor	r26, r26
 980:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__addsf3x>
 984:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__fp_round>
 988:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fp_pscA>
 98c:	38 f0       	brcs	.+14     	; 0x99c <__addsf3+0x20>
 98e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fp_pscB>
 992:	20 f0       	brcs	.+8      	; 0x99c <__addsf3+0x20>
 994:	39 f4       	brne	.+14     	; 0x9a4 <__addsf3+0x28>
 996:	9f 3f       	cpi	r25, 0xFF	; 255
 998:	19 f4       	brne	.+6      	; 0x9a0 <__addsf3+0x24>
 99a:	26 f4       	brtc	.+8      	; 0x9a4 <__addsf3+0x28>
 99c:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_nan>
 9a0:	0e f4       	brtc	.+2      	; 0x9a4 <__addsf3+0x28>
 9a2:	e0 95       	com	r30
 9a4:	e7 fb       	bst	r30, 7
 9a6:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__fp_inf>

000009aa <__addsf3x>:
 9aa:	e9 2f       	mov	r30, r25
 9ac:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fp_split3>
 9b0:	58 f3       	brcs	.-42     	; 0x988 <__addsf3+0xc>
 9b2:	ba 17       	cp	r27, r26
 9b4:	62 07       	cpc	r22, r18
 9b6:	73 07       	cpc	r23, r19
 9b8:	84 07       	cpc	r24, r20
 9ba:	95 07       	cpc	r25, r21
 9bc:	20 f0       	brcs	.+8      	; 0x9c6 <__addsf3x+0x1c>
 9be:	79 f4       	brne	.+30     	; 0x9de <__addsf3x+0x34>
 9c0:	a6 f5       	brtc	.+104    	; 0xa2a <__addsf3x+0x80>
 9c2:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__fp_zero>
 9c6:	0e f4       	brtc	.+2      	; 0x9ca <__addsf3x+0x20>
 9c8:	e0 95       	com	r30
 9ca:	0b 2e       	mov	r0, r27
 9cc:	ba 2f       	mov	r27, r26
 9ce:	a0 2d       	mov	r26, r0
 9d0:	0b 01       	movw	r0, r22
 9d2:	b9 01       	movw	r22, r18
 9d4:	90 01       	movw	r18, r0
 9d6:	0c 01       	movw	r0, r24
 9d8:	ca 01       	movw	r24, r20
 9da:	a0 01       	movw	r20, r0
 9dc:	11 24       	eor	r1, r1
 9de:	ff 27       	eor	r31, r31
 9e0:	59 1b       	sub	r21, r25
 9e2:	99 f0       	breq	.+38     	; 0xa0a <__addsf3x+0x60>
 9e4:	59 3f       	cpi	r21, 0xF9	; 249
 9e6:	50 f4       	brcc	.+20     	; 0x9fc <__addsf3x+0x52>
 9e8:	50 3e       	cpi	r21, 0xE0	; 224
 9ea:	68 f1       	brcs	.+90     	; 0xa46 <__addsf3x+0x9c>
 9ec:	1a 16       	cp	r1, r26
 9ee:	f0 40       	sbci	r31, 0x00	; 0
 9f0:	a2 2f       	mov	r26, r18
 9f2:	23 2f       	mov	r18, r19
 9f4:	34 2f       	mov	r19, r20
 9f6:	44 27       	eor	r20, r20
 9f8:	58 5f       	subi	r21, 0xF8	; 248
 9fa:	f3 cf       	rjmp	.-26     	; 0x9e2 <__addsf3x+0x38>
 9fc:	46 95       	lsr	r20
 9fe:	37 95       	ror	r19
 a00:	27 95       	ror	r18
 a02:	a7 95       	ror	r26
 a04:	f0 40       	sbci	r31, 0x00	; 0
 a06:	53 95       	inc	r21
 a08:	c9 f7       	brne	.-14     	; 0x9fc <__addsf3x+0x52>
 a0a:	7e f4       	brtc	.+30     	; 0xa2a <__addsf3x+0x80>
 a0c:	1f 16       	cp	r1, r31
 a0e:	ba 0b       	sbc	r27, r26
 a10:	62 0b       	sbc	r22, r18
 a12:	73 0b       	sbc	r23, r19
 a14:	84 0b       	sbc	r24, r20
 a16:	ba f0       	brmi	.+46     	; 0xa46 <__addsf3x+0x9c>
 a18:	91 50       	subi	r25, 0x01	; 1
 a1a:	a1 f0       	breq	.+40     	; 0xa44 <__addsf3x+0x9a>
 a1c:	ff 0f       	add	r31, r31
 a1e:	bb 1f       	adc	r27, r27
 a20:	66 1f       	adc	r22, r22
 a22:	77 1f       	adc	r23, r23
 a24:	88 1f       	adc	r24, r24
 a26:	c2 f7       	brpl	.-16     	; 0xa18 <__addsf3x+0x6e>
 a28:	0e c0       	rjmp	.+28     	; 0xa46 <__addsf3x+0x9c>
 a2a:	ba 0f       	add	r27, r26
 a2c:	62 1f       	adc	r22, r18
 a2e:	73 1f       	adc	r23, r19
 a30:	84 1f       	adc	r24, r20
 a32:	48 f4       	brcc	.+18     	; 0xa46 <__addsf3x+0x9c>
 a34:	87 95       	ror	r24
 a36:	77 95       	ror	r23
 a38:	67 95       	ror	r22
 a3a:	b7 95       	ror	r27
 a3c:	f7 95       	ror	r31
 a3e:	9e 3f       	cpi	r25, 0xFE	; 254
 a40:	08 f0       	brcs	.+2      	; 0xa44 <__addsf3x+0x9a>
 a42:	b0 cf       	rjmp	.-160    	; 0x9a4 <__addsf3+0x28>
 a44:	93 95       	inc	r25
 a46:	88 0f       	add	r24, r24
 a48:	08 f0       	brcs	.+2      	; 0xa4c <__addsf3x+0xa2>
 a4a:	99 27       	eor	r25, r25
 a4c:	ee 0f       	add	r30, r30
 a4e:	97 95       	ror	r25
 a50:	87 95       	ror	r24
 a52:	08 95       	ret

00000a54 <__fixunssfsi>:
 a54:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__fp_splitA>
 a58:	88 f0       	brcs	.+34     	; 0xa7c <__fixunssfsi+0x28>
 a5a:	9f 57       	subi	r25, 0x7F	; 127
 a5c:	98 f0       	brcs	.+38     	; 0xa84 <__fixunssfsi+0x30>
 a5e:	b9 2f       	mov	r27, r25
 a60:	99 27       	eor	r25, r25
 a62:	b7 51       	subi	r27, 0x17	; 23
 a64:	b0 f0       	brcs	.+44     	; 0xa92 <__fixunssfsi+0x3e>
 a66:	e1 f0       	breq	.+56     	; 0xaa0 <__fixunssfsi+0x4c>
 a68:	66 0f       	add	r22, r22
 a6a:	77 1f       	adc	r23, r23
 a6c:	88 1f       	adc	r24, r24
 a6e:	99 1f       	adc	r25, r25
 a70:	1a f0       	brmi	.+6      	; 0xa78 <__fixunssfsi+0x24>
 a72:	ba 95       	dec	r27
 a74:	c9 f7       	brne	.-14     	; 0xa68 <__fixunssfsi+0x14>
 a76:	14 c0       	rjmp	.+40     	; 0xaa0 <__fixunssfsi+0x4c>
 a78:	b1 30       	cpi	r27, 0x01	; 1
 a7a:	91 f0       	breq	.+36     	; 0xaa0 <__fixunssfsi+0x4c>
 a7c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__fp_zero>
 a80:	b1 e0       	ldi	r27, 0x01	; 1
 a82:	08 95       	ret
 a84:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__fp_zero>
 a88:	67 2f       	mov	r22, r23
 a8a:	78 2f       	mov	r23, r24
 a8c:	88 27       	eor	r24, r24
 a8e:	b8 5f       	subi	r27, 0xF8	; 248
 a90:	39 f0       	breq	.+14     	; 0xaa0 <__fixunssfsi+0x4c>
 a92:	b9 3f       	cpi	r27, 0xF9	; 249
 a94:	cc f3       	brlt	.-14     	; 0xa88 <__fixunssfsi+0x34>
 a96:	86 95       	lsr	r24
 a98:	77 95       	ror	r23
 a9a:	67 95       	ror	r22
 a9c:	b3 95       	inc	r27
 a9e:	d9 f7       	brne	.-10     	; 0xa96 <__fixunssfsi+0x42>
 aa0:	3e f4       	brtc	.+14     	; 0xab0 <__fixunssfsi+0x5c>
 aa2:	90 95       	com	r25
 aa4:	80 95       	com	r24
 aa6:	70 95       	com	r23
 aa8:	61 95       	neg	r22
 aaa:	7f 4f       	sbci	r23, 0xFF	; 255
 aac:	8f 4f       	sbci	r24, 0xFF	; 255
 aae:	9f 4f       	sbci	r25, 0xFF	; 255
 ab0:	08 95       	ret

00000ab2 <__floatunsisf>:
 ab2:	e8 94       	clt
 ab4:	09 c0       	rjmp	.+18     	; 0xac8 <__floatsisf+0x12>

00000ab6 <__floatsisf>:
 ab6:	97 fb       	bst	r25, 7
 ab8:	3e f4       	brtc	.+14     	; 0xac8 <__floatsisf+0x12>
 aba:	90 95       	com	r25
 abc:	80 95       	com	r24
 abe:	70 95       	com	r23
 ac0:	61 95       	neg	r22
 ac2:	7f 4f       	sbci	r23, 0xFF	; 255
 ac4:	8f 4f       	sbci	r24, 0xFF	; 255
 ac6:	9f 4f       	sbci	r25, 0xFF	; 255
 ac8:	99 23       	and	r25, r25
 aca:	a9 f0       	breq	.+42     	; 0xaf6 <__floatsisf+0x40>
 acc:	f9 2f       	mov	r31, r25
 ace:	96 e9       	ldi	r25, 0x96	; 150
 ad0:	bb 27       	eor	r27, r27
 ad2:	93 95       	inc	r25
 ad4:	f6 95       	lsr	r31
 ad6:	87 95       	ror	r24
 ad8:	77 95       	ror	r23
 ada:	67 95       	ror	r22
 adc:	b7 95       	ror	r27
 ade:	f1 11       	cpse	r31, r1
 ae0:	f8 cf       	rjmp	.-16     	; 0xad2 <__floatsisf+0x1c>
 ae2:	fa f4       	brpl	.+62     	; 0xb22 <__floatsisf+0x6c>
 ae4:	bb 0f       	add	r27, r27
 ae6:	11 f4       	brne	.+4      	; 0xaec <__floatsisf+0x36>
 ae8:	60 ff       	sbrs	r22, 0
 aea:	1b c0       	rjmp	.+54     	; 0xb22 <__floatsisf+0x6c>
 aec:	6f 5f       	subi	r22, 0xFF	; 255
 aee:	7f 4f       	sbci	r23, 0xFF	; 255
 af0:	8f 4f       	sbci	r24, 0xFF	; 255
 af2:	9f 4f       	sbci	r25, 0xFF	; 255
 af4:	16 c0       	rjmp	.+44     	; 0xb22 <__floatsisf+0x6c>
 af6:	88 23       	and	r24, r24
 af8:	11 f0       	breq	.+4      	; 0xafe <__floatsisf+0x48>
 afa:	96 e9       	ldi	r25, 0x96	; 150
 afc:	11 c0       	rjmp	.+34     	; 0xb20 <__floatsisf+0x6a>
 afe:	77 23       	and	r23, r23
 b00:	21 f0       	breq	.+8      	; 0xb0a <__floatsisf+0x54>
 b02:	9e e8       	ldi	r25, 0x8E	; 142
 b04:	87 2f       	mov	r24, r23
 b06:	76 2f       	mov	r23, r22
 b08:	05 c0       	rjmp	.+10     	; 0xb14 <__floatsisf+0x5e>
 b0a:	66 23       	and	r22, r22
 b0c:	71 f0       	breq	.+28     	; 0xb2a <__floatsisf+0x74>
 b0e:	96 e8       	ldi	r25, 0x86	; 134
 b10:	86 2f       	mov	r24, r22
 b12:	70 e0       	ldi	r23, 0x00	; 0
 b14:	60 e0       	ldi	r22, 0x00	; 0
 b16:	2a f0       	brmi	.+10     	; 0xb22 <__floatsisf+0x6c>
 b18:	9a 95       	dec	r25
 b1a:	66 0f       	add	r22, r22
 b1c:	77 1f       	adc	r23, r23
 b1e:	88 1f       	adc	r24, r24
 b20:	da f7       	brpl	.-10     	; 0xb18 <__floatsisf+0x62>
 b22:	88 0f       	add	r24, r24
 b24:	96 95       	lsr	r25
 b26:	87 95       	ror	r24
 b28:	97 f9       	bld	r25, 7
 b2a:	08 95       	ret

00000b2c <__fp_inf>:
 b2c:	97 f9       	bld	r25, 7
 b2e:	9f 67       	ori	r25, 0x7F	; 127
 b30:	80 e8       	ldi	r24, 0x80	; 128
 b32:	70 e0       	ldi	r23, 0x00	; 0
 b34:	60 e0       	ldi	r22, 0x00	; 0
 b36:	08 95       	ret

00000b38 <__fp_nan>:
 b38:	9f ef       	ldi	r25, 0xFF	; 255
 b3a:	80 ec       	ldi	r24, 0xC0	; 192
 b3c:	08 95       	ret

00000b3e <__fp_pscA>:
 b3e:	00 24       	eor	r0, r0
 b40:	0a 94       	dec	r0
 b42:	16 16       	cp	r1, r22
 b44:	17 06       	cpc	r1, r23
 b46:	18 06       	cpc	r1, r24
 b48:	09 06       	cpc	r0, r25
 b4a:	08 95       	ret

00000b4c <__fp_pscB>:
 b4c:	00 24       	eor	r0, r0
 b4e:	0a 94       	dec	r0
 b50:	12 16       	cp	r1, r18
 b52:	13 06       	cpc	r1, r19
 b54:	14 06       	cpc	r1, r20
 b56:	05 06       	cpc	r0, r21
 b58:	08 95       	ret

00000b5a <__fp_round>:
 b5a:	09 2e       	mov	r0, r25
 b5c:	03 94       	inc	r0
 b5e:	00 0c       	add	r0, r0
 b60:	11 f4       	brne	.+4      	; 0xb66 <__fp_round+0xc>
 b62:	88 23       	and	r24, r24
 b64:	52 f0       	brmi	.+20     	; 0xb7a <__fp_round+0x20>
 b66:	bb 0f       	add	r27, r27
 b68:	40 f4       	brcc	.+16     	; 0xb7a <__fp_round+0x20>
 b6a:	bf 2b       	or	r27, r31
 b6c:	11 f4       	brne	.+4      	; 0xb72 <__fp_round+0x18>
 b6e:	60 ff       	sbrs	r22, 0
 b70:	04 c0       	rjmp	.+8      	; 0xb7a <__fp_round+0x20>
 b72:	6f 5f       	subi	r22, 0xFF	; 255
 b74:	7f 4f       	sbci	r23, 0xFF	; 255
 b76:	8f 4f       	sbci	r24, 0xFF	; 255
 b78:	9f 4f       	sbci	r25, 0xFF	; 255
 b7a:	08 95       	ret

00000b7c <__fp_split3>:
 b7c:	57 fd       	sbrc	r21, 7
 b7e:	90 58       	subi	r25, 0x80	; 128
 b80:	44 0f       	add	r20, r20
 b82:	55 1f       	adc	r21, r21
 b84:	59 f0       	breq	.+22     	; 0xb9c <__fp_splitA+0x10>
 b86:	5f 3f       	cpi	r21, 0xFF	; 255
 b88:	71 f0       	breq	.+28     	; 0xba6 <__fp_splitA+0x1a>
 b8a:	47 95       	ror	r20

00000b8c <__fp_splitA>:
 b8c:	88 0f       	add	r24, r24
 b8e:	97 fb       	bst	r25, 7
 b90:	99 1f       	adc	r25, r25
 b92:	61 f0       	breq	.+24     	; 0xbac <__fp_splitA+0x20>
 b94:	9f 3f       	cpi	r25, 0xFF	; 255
 b96:	79 f0       	breq	.+30     	; 0xbb6 <__fp_splitA+0x2a>
 b98:	87 95       	ror	r24
 b9a:	08 95       	ret
 b9c:	12 16       	cp	r1, r18
 b9e:	13 06       	cpc	r1, r19
 ba0:	14 06       	cpc	r1, r20
 ba2:	55 1f       	adc	r21, r21
 ba4:	f2 cf       	rjmp	.-28     	; 0xb8a <__fp_split3+0xe>
 ba6:	46 95       	lsr	r20
 ba8:	f1 df       	rcall	.-30     	; 0xb8c <__fp_splitA>
 baa:	08 c0       	rjmp	.+16     	; 0xbbc <__fp_splitA+0x30>
 bac:	16 16       	cp	r1, r22
 bae:	17 06       	cpc	r1, r23
 bb0:	18 06       	cpc	r1, r24
 bb2:	99 1f       	adc	r25, r25
 bb4:	f1 cf       	rjmp	.-30     	; 0xb98 <__fp_splitA+0xc>
 bb6:	86 95       	lsr	r24
 bb8:	71 05       	cpc	r23, r1
 bba:	61 05       	cpc	r22, r1
 bbc:	08 94       	sec
 bbe:	08 95       	ret

00000bc0 <__fp_zero>:
 bc0:	e8 94       	clt

00000bc2 <__fp_szero>:
 bc2:	bb 27       	eor	r27, r27
 bc4:	66 27       	eor	r22, r22
 bc6:	77 27       	eor	r23, r23
 bc8:	cb 01       	movw	r24, r22
 bca:	97 f9       	bld	r25, 7
 bcc:	08 95       	ret

00000bce <__mulsf3>:
 bce:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__mulsf3x>
 bd2:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__fp_round>
 bd6:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fp_pscA>
 bda:	38 f0       	brcs	.+14     	; 0xbea <__mulsf3+0x1c>
 bdc:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fp_pscB>
 be0:	20 f0       	brcs	.+8      	; 0xbea <__mulsf3+0x1c>
 be2:	95 23       	and	r25, r21
 be4:	11 f0       	breq	.+4      	; 0xbea <__mulsf3+0x1c>
 be6:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__fp_inf>
 bea:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__fp_nan>
 bee:	11 24       	eor	r1, r1
 bf0:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__fp_szero>

00000bf4 <__mulsf3x>:
 bf4:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fp_split3>
 bf8:	70 f3       	brcs	.-36     	; 0xbd6 <__mulsf3+0x8>

00000bfa <__mulsf3_pse>:
 bfa:	95 9f       	mul	r25, r21
 bfc:	c1 f3       	breq	.-16     	; 0xbee <__mulsf3+0x20>
 bfe:	95 0f       	add	r25, r21
 c00:	50 e0       	ldi	r21, 0x00	; 0
 c02:	55 1f       	adc	r21, r21
 c04:	62 9f       	mul	r22, r18
 c06:	f0 01       	movw	r30, r0
 c08:	72 9f       	mul	r23, r18
 c0a:	bb 27       	eor	r27, r27
 c0c:	f0 0d       	add	r31, r0
 c0e:	b1 1d       	adc	r27, r1
 c10:	63 9f       	mul	r22, r19
 c12:	aa 27       	eor	r26, r26
 c14:	f0 0d       	add	r31, r0
 c16:	b1 1d       	adc	r27, r1
 c18:	aa 1f       	adc	r26, r26
 c1a:	64 9f       	mul	r22, r20
 c1c:	66 27       	eor	r22, r22
 c1e:	b0 0d       	add	r27, r0
 c20:	a1 1d       	adc	r26, r1
 c22:	66 1f       	adc	r22, r22
 c24:	82 9f       	mul	r24, r18
 c26:	22 27       	eor	r18, r18
 c28:	b0 0d       	add	r27, r0
 c2a:	a1 1d       	adc	r26, r1
 c2c:	62 1f       	adc	r22, r18
 c2e:	73 9f       	mul	r23, r19
 c30:	b0 0d       	add	r27, r0
 c32:	a1 1d       	adc	r26, r1
 c34:	62 1f       	adc	r22, r18
 c36:	83 9f       	mul	r24, r19
 c38:	a0 0d       	add	r26, r0
 c3a:	61 1d       	adc	r22, r1
 c3c:	22 1f       	adc	r18, r18
 c3e:	74 9f       	mul	r23, r20
 c40:	33 27       	eor	r19, r19
 c42:	a0 0d       	add	r26, r0
 c44:	61 1d       	adc	r22, r1
 c46:	23 1f       	adc	r18, r19
 c48:	84 9f       	mul	r24, r20
 c4a:	60 0d       	add	r22, r0
 c4c:	21 1d       	adc	r18, r1
 c4e:	82 2f       	mov	r24, r18
 c50:	76 2f       	mov	r23, r22
 c52:	6a 2f       	mov	r22, r26
 c54:	11 24       	eor	r1, r1
 c56:	9f 57       	subi	r25, 0x7F	; 127
 c58:	50 40       	sbci	r21, 0x00	; 0
 c5a:	9a f0       	brmi	.+38     	; 0xc82 <__mulsf3_pse+0x88>
 c5c:	f1 f0       	breq	.+60     	; 0xc9a <__mulsf3_pse+0xa0>
 c5e:	88 23       	and	r24, r24
 c60:	4a f0       	brmi	.+18     	; 0xc74 <__mulsf3_pse+0x7a>
 c62:	ee 0f       	add	r30, r30
 c64:	ff 1f       	adc	r31, r31
 c66:	bb 1f       	adc	r27, r27
 c68:	66 1f       	adc	r22, r22
 c6a:	77 1f       	adc	r23, r23
 c6c:	88 1f       	adc	r24, r24
 c6e:	91 50       	subi	r25, 0x01	; 1
 c70:	50 40       	sbci	r21, 0x00	; 0
 c72:	a9 f7       	brne	.-22     	; 0xc5e <__mulsf3_pse+0x64>
 c74:	9e 3f       	cpi	r25, 0xFE	; 254
 c76:	51 05       	cpc	r21, r1
 c78:	80 f0       	brcs	.+32     	; 0xc9a <__mulsf3_pse+0xa0>
 c7a:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__fp_inf>
 c7e:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__fp_szero>
 c82:	5f 3f       	cpi	r21, 0xFF	; 255
 c84:	e4 f3       	brlt	.-8      	; 0xc7e <__mulsf3_pse+0x84>
 c86:	98 3e       	cpi	r25, 0xE8	; 232
 c88:	d4 f3       	brlt	.-12     	; 0xc7e <__mulsf3_pse+0x84>
 c8a:	86 95       	lsr	r24
 c8c:	77 95       	ror	r23
 c8e:	67 95       	ror	r22
 c90:	b7 95       	ror	r27
 c92:	f7 95       	ror	r31
 c94:	e7 95       	ror	r30
 c96:	9f 5f       	subi	r25, 0xFF	; 255
 c98:	c1 f7       	brne	.-16     	; 0xc8a <__mulsf3_pse+0x90>
 c9a:	fe 2b       	or	r31, r30
 c9c:	88 0f       	add	r24, r24
 c9e:	91 1d       	adc	r25, r1
 ca0:	96 95       	lsr	r25
 ca2:	87 95       	ror	r24
 ca4:	97 f9       	bld	r25, 7
 ca6:	08 95       	ret

00000ca8 <__udivmodsi4>:
 ca8:	a1 e2       	ldi	r26, 0x21	; 33
 caa:	1a 2e       	mov	r1, r26
 cac:	aa 1b       	sub	r26, r26
 cae:	bb 1b       	sub	r27, r27
 cb0:	fd 01       	movw	r30, r26
 cb2:	0d c0       	rjmp	.+26     	; 0xcce <__udivmodsi4_ep>

00000cb4 <__udivmodsi4_loop>:
 cb4:	aa 1f       	adc	r26, r26
 cb6:	bb 1f       	adc	r27, r27
 cb8:	ee 1f       	adc	r30, r30
 cba:	ff 1f       	adc	r31, r31
 cbc:	a2 17       	cp	r26, r18
 cbe:	b3 07       	cpc	r27, r19
 cc0:	e4 07       	cpc	r30, r20
 cc2:	f5 07       	cpc	r31, r21
 cc4:	20 f0       	brcs	.+8      	; 0xcce <__udivmodsi4_ep>
 cc6:	a2 1b       	sub	r26, r18
 cc8:	b3 0b       	sbc	r27, r19
 cca:	e4 0b       	sbc	r30, r20
 ccc:	f5 0b       	sbc	r31, r21

00000cce <__udivmodsi4_ep>:
 cce:	66 1f       	adc	r22, r22
 cd0:	77 1f       	adc	r23, r23
 cd2:	88 1f       	adc	r24, r24
 cd4:	99 1f       	adc	r25, r25
 cd6:	1a 94       	dec	r1
 cd8:	69 f7       	brne	.-38     	; 0xcb4 <__udivmodsi4_loop>
 cda:	60 95       	com	r22
 cdc:	70 95       	com	r23
 cde:	80 95       	com	r24
 ce0:	90 95       	com	r25
 ce2:	9b 01       	movw	r18, r22
 ce4:	ac 01       	movw	r20, r24
 ce6:	bd 01       	movw	r22, r26
 ce8:	cf 01       	movw	r24, r30
 cea:	08 95       	ret

00000cec <__tablejump2__>:
 cec:	ee 0f       	add	r30, r30
 cee:	ff 1f       	adc	r31, r31
 cf0:	05 90       	lpm	r0, Z+
 cf2:	f4 91       	lpm	r31, Z
 cf4:	e0 2d       	mov	r30, r0
 cf6:	09 94       	ijmp

00000cf8 <_exit>:
 cf8:	f8 94       	cli

00000cfa <__stop_program>:
 cfa:	ff cf       	rjmp	.-2      	; 0xcfa <__stop_program>
