
GccApplication5_servo_Timer0_Timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b6d  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d2  00000000  00000000  00000e69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000463  00000000  00000000  0000183b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000511  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f9  00000000  00000000  00002269  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002362  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  68:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  6c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  70:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  74:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  7c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  80:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  84:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  88:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  8c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  90:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  94:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  98:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  9c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  ac:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  bc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  dc:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <P1point3>:
	}
}
// ================================== define subroutines ==================================
// delay 1.3ms Timer0 CTC
void P1point3(){
	TCNT0 = 0x00;					// initial value
  e4:	16 bc       	out	0x26, r1	; 38
	OCR0B=20;						// (1.3x10^-3/(0.0625x10^-6))/1024 = ~20
  e6:	84 e1       	ldi	r24, 0x14	; 20
  e8:	88 bd       	out	0x28, r24	; 40
	TCCR0B = 0b00001101;			// set up CTC mode, 1024 prescaler
  ea:	8d e0       	ldi	r24, 0x0D	; 13
  ec:	85 bd       	out	0x25, r24	; 37
	while((TIFR0&(1<<OCF0B))==0);	//stay here until OCF0B=1 rollover
  ee:	aa 9b       	sbis	0x15, 2	; 21
  f0:	fe cf       	rjmp	.-4      	; 0xee <P1point3+0xa>
	TCCR0B = 0;
  f2:	15 bc       	out	0x25, r1	; 37
	TIFR0 = (1<<OCF0B);
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	08 95       	ret

000000fa <P1point5>:
}
// delay 1.5ms Timer0 CTC
void P1point5(){
	TCNT0 = 0x00;					// initial value
  fa:	16 bc       	out	0x26, r1	; 38
	OCR0B=23;						// 1.5x10^-3/(0.0625x10^-6)/1024 = ~23
  fc:	87 e1       	ldi	r24, 0x17	; 23
  fe:	88 bd       	out	0x28, r24	; 40
	TCCR0B = 0b00001101;			// set up CTC mode, 1024 prescaler
 100:	8d e0       	ldi	r24, 0x0D	; 13
 102:	85 bd       	out	0x25, r24	; 37
	while((TIFR0&(1<<OCF0B))==0);	//stay here until OCF0B=1 rollover
 104:	aa 9b       	sbis	0x15, 2	; 21
 106:	fe cf       	rjmp	.-4      	; 0x104 <P1point5+0xa>
	TCCR0B = 0;
 108:	15 bc       	out	0x25, r1	; 37
	TIFR0 = (1<<OCF0B);
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	85 bb       	out	0x15, r24	; 21
 10e:	08 95       	ret

00000110 <P1point7>:
}
// delay 1.7ms Timer0 CTC
void P1point7(){
	TCNT0 = 0x00;					// initial value 
 110:	16 bc       	out	0x26, r1	; 38
	OCR0B=26;						// 1.7x10^-3/(0.0625x10^-6)/1024 = ~27 
 112:	8a e1       	ldi	r24, 0x1A	; 26
 114:	88 bd       	out	0x28, r24	; 40
	TCCR0B = 0b00001101;			// set up CTC mode, 1024 prescaler
 116:	8d e0       	ldi	r24, 0x0D	; 13
 118:	85 bd       	out	0x25, r24	; 37
	while((TIFR0&(1<<OCF0B))==0);	//stay here until OCF0B=1 rollover
 11a:	aa 9b       	sbis	0x15, 2	; 21
 11c:	fe cf       	rjmp	.-4      	; 0x11a <P1point7+0xa>
	TCCR0B = 0;
 11e:	15 bc       	out	0x25, r1	; 37
	TIFR0 = (1<<OCF0B);
 120:	84 e0       	ldi	r24, 0x04	; 4
 122:	85 bb       	out	0x15, r24	; 21
 124:	08 95       	ret

00000126 <P20msec>:
}
// delay 20ms Timer1
void P20msec(){
	TCNT1H = 0xEC;					// high reg 0xEC
 126:	8c ee       	ldi	r24, 0xEC	; 236
 128:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	TCNT1L = 0x77;					// low reg 0x77
 12c:	87 e7       	ldi	r24, 0x77	; 119
 12e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A = 0x00;					// normal mode initial val = 0x00
 132:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0x03;					// prescale 64
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	while((TIFR1&(1<<TOV1))==0);	// wait till overflow
 13c:	b0 9b       	sbis	0x16, 0	; 22
 13e:	fe cf       	rjmp	.-4      	; 0x13c <P20msec+0x16>
	TCCR1A = 0;						// reset
 140:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 144:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIFR1 = (1<< TOV1);
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	86 bb       	out	0x16, r24	; 22
 14c:	08 95       	ret

0000014e <clockwise>:
		stop();					// stop subroutine
	}
}

//=========================wave pulse with 3sec duration======================
void clockwise(){
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
	int counter = 0;
 152:	c0 e0       	ldi	r28, 0x00	; 0
 154:	d0 e0       	ldi	r29, 0x00	; 0
	while (counter < 142){		// 3sec/(1.3+20)ms = 141 loop iterations
 156:	08 c0       	rjmp	.+16     	; 0x168 <clockwise+0x1a>
		PORTD = 0b0000100;		// PD2 ON
 158:	84 e0       	ldi	r24, 0x04	; 4
 15a:	8b b9       	out	0x0b, r24	; 11
		P1point3();				// delay 1.3ms
 15c:	0e 94 72 00 	call	0xe4	; 0xe4 <P1point3>
		PORTD = 0b0000000;		// PD2 OFF
 160:	1b b8       	out	0x0b, r1	; 11
		P20msec();				// delay 20ms
 162:	0e 94 93 00 	call	0x126	; 0x126 <P20msec>
		counter+=1;				// count till 142 for 3sec clockwise turn
 166:	21 96       	adiw	r28, 0x01	; 1
}

//=========================wave pulse with 3sec duration======================
void clockwise(){
	int counter = 0;
	while (counter < 142){		// 3sec/(1.3+20)ms = 141 loop iterations
 168:	ce 38       	cpi	r28, 0x8E	; 142
 16a:	d1 05       	cpc	r29, r1
 16c:	ac f3       	brlt	.-22     	; 0x158 <clockwise+0xa>
		P1point3();				// delay 1.3ms
		PORTD = 0b0000000;		// PD2 OFF
		P20msec();				// delay 20ms
		counter+=1;				// count till 142 for 3sec clockwise turn
	}
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <stop>:
void stop(){
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
	int counter = 0;
 178:	c0 e0       	ldi	r28, 0x00	; 0
 17a:	d0 e0       	ldi	r29, 0x00	; 0
	while (counter < 139){		//  3sec/(1.5+20)ms = 139 loop iterations
 17c:	08 c0       	rjmp	.+16     	; 0x18e <stop+0x1a>
		PORTD = 0b0000100;		// PD2 ON
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	8b b9       	out	0x0b, r24	; 11
		P1point5();				// delay 1.5ms
 182:	0e 94 7d 00 	call	0xfa	; 0xfa <P1point5>
		PORTD = 0b0000000;		// PD2 OFF
 186:	1b b8       	out	0x0b, r1	; 11
		P20msec();				// delay 20ms
 188:	0e 94 93 00 	call	0x126	; 0x126 <P20msec>
		counter+=1;
 18c:	21 96       	adiw	r28, 0x01	; 1
		counter+=1;				// count till 142 for 3sec clockwise turn
	}
}
void stop(){
	int counter = 0;
	while (counter < 139){		//  3sec/(1.5+20)ms = 139 loop iterations
 18e:	cb 38       	cpi	r28, 0x8B	; 139
 190:	d1 05       	cpc	r29, r1
 192:	ac f3       	brlt	.-22     	; 0x17e <stop+0xa>
		P1point5();				// delay 1.5ms
		PORTD = 0b0000000;		// PD2 OFF
		P20msec();				// delay 20ms
		counter+=1;
	}
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <counter_clockwise>:
void counter_clockwise(){
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
	int counter = 0;
 19e:	c0 e0       	ldi	r28, 0x00	; 0
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
	while (counter < 138){		//  3sec/(1.7+20)ms = 138 loop iteration
 1a2:	08 c0       	rjmp	.+16     	; 0x1b4 <counter_clockwise+0x1a>
		PORTD = 0b0000100;		// PD2 ON
 1a4:	84 e0       	ldi	r24, 0x04	; 4
 1a6:	8b b9       	out	0x0b, r24	; 11
		P1point7();				// delay 1.5ms
 1a8:	0e 94 88 00 	call	0x110	; 0x110 <P1point7>
		PORTD = 0b0000000;		// PD2 OFF
 1ac:	1b b8       	out	0x0b, r1	; 11
		P20msec();				// delay 20ms
 1ae:	0e 94 93 00 	call	0x126	; 0x126 <P20msec>
		counter+=1;
 1b2:	21 96       	adiw	r28, 0x01	; 1
		counter+=1;
	}
}
void counter_clockwise(){
	int counter = 0;
	while (counter < 138){		//  3sec/(1.7+20)ms = 138 loop iteration
 1b4:	ca 38       	cpi	r28, 0x8A	; 138
 1b6:	d1 05       	cpc	r29, r1
 1b8:	ac f3       	brlt	.-22     	; 0x1a4 <counter_clockwise+0xa>
		P1point7();				// delay 1.5ms
		PORTD = 0b0000000;		// PD2 OFF
		P20msec();				// delay 20ms
		counter+=1;
	}
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <main>:
void stop();
void counter_clockwise();

int main (void) {	
	while (1)	{		
		DDRD = 1<<2;			
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	8a b9       	out	0x0a, r24	; 10
		PORTD &= ~(1<<2);		// set pinD2 ON
 1c4:	8b b1       	in	r24, 0x0b	; 11
 1c6:	8b 7f       	andi	r24, 0xFB	; 251
 1c8:	8b b9       	out	0x0b, r24	; 11
		clockwise();			// rotate clockwise subroutine
 1ca:	0e 94 a7 00 	call	0x14e	; 0x14e <clockwise>
		stop();					// stop subroutine
 1ce:	0e 94 ba 00 	call	0x174	; 0x174 <stop>
		counter_clockwise();	// rotate counter-clockwise
 1d2:	0e 94 cd 00 	call	0x19a	; 0x19a <counter_clockwise>
		stop();					// stop subroutine
 1d6:	0e 94 ba 00 	call	0x174	; 0x174 <stop>
 1da:	f2 cf       	rjmp	.-28     	; 0x1c0 <main>

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
