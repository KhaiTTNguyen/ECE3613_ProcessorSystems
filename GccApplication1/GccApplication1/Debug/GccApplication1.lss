
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000056e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000051a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000056e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b6d  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ed  00000000  00000000  0000116d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a5  00000000  00000000  00001b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001f00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e9  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  0000241d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  68:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  6c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  70:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  74:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  7c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  80:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  84:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  88:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  8c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  90:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  94:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  98:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  9c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  a8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  ac:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  b8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  bc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  c8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  dc:	0c 94 8b 02 	jmp	0x516	; 0x516 <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <main>:
#include <avr/io.h> //standard AVR header
#define F_CPU 16000000UL// Define CPU frequency for delay.h
#include <util/delay.h>

int main(void)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	6c 97       	sbiw	r28, 0x1c	; 28
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	f8 94       	cli
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF; //PORTA is output
  f8:	81 e2       	ldi	r24, 0x21	; 33
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18

	while (1)
	{
		PORTA = 0xAA;
 102:	82 e2       	ldi	r24, 0x22	; 34
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	2a ea       	ldi	r18, 0xAA	; 170
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	aa e7       	ldi	r26, 0x7A	; 122
 112:	b4 e4       	ldi	r27, 0x44	; 68
 114:	89 83       	std	Y+1, r24	; 0x01
 116:	9a 83       	std	Y+2, r25	; 0x02
 118:	ab 83       	std	Y+3, r26	; 0x03
 11a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	4a e7       	ldi	r20, 0x7A	; 122
 122:	55 e4       	ldi	r21, 0x45	; 69
 124:	69 81       	ldd	r22, Y+1	; 0x01
 126:	7a 81       	ldd	r23, Y+2	; 0x02
 128:	8b 81       	ldd	r24, Y+3	; 0x03
 12a:	9c 81       	ldd	r25, Y+4	; 0x04
 12c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <__mulsf3>
 130:	dc 01       	movw	r26, r24
 132:	cb 01       	movw	r24, r22
 134:	8b 8b       	std	Y+19, r24	; 0x13
 136:	9c 8b       	std	Y+20, r25	; 0x14
 138:	ad 8b       	std	Y+21, r26	; 0x15
 13a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	40 e8       	ldi	r20, 0x80	; 128
 142:	5f e3       	ldi	r21, 0x3F	; 63
 144:	6b 89       	ldd	r22, Y+19	; 0x13
 146:	7c 89       	ldd	r23, Y+20	; 0x14
 148:	8d 89       	ldd	r24, Y+21	; 0x15
 14a:	9e 89       	ldd	r25, Y+22	; 0x16
 14c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__cmpsf2>
 150:	88 23       	and	r24, r24
 152:	2c f4       	brge	.+10     	; 0x15e <main+0x7a>
		__ticks = 1;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	98 8f       	std	Y+24, r25	; 0x18
 15a:	8f 8b       	std	Y+23, r24	; 0x17
 15c:	3f c0       	rjmp	.+126    	; 0x1dc <main+0xf8>
	else if (__tmp > 65535)
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	3f ef       	ldi	r19, 0xFF	; 255
 162:	4f e7       	ldi	r20, 0x7F	; 127
 164:	57 e4       	ldi	r21, 0x47	; 71
 166:	6b 89       	ldd	r22, Y+19	; 0x13
 168:	7c 89       	ldd	r23, Y+20	; 0x14
 16a:	8d 89       	ldd	r24, Y+21	; 0x15
 16c:	9e 89       	ldd	r25, Y+22	; 0x16
 16e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__gesf2>
 172:	18 16       	cp	r1, r24
 174:	4c f5       	brge	.+82     	; 0x1c8 <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	40 e2       	ldi	r20, 0x20	; 32
 17c:	51 e4       	ldi	r21, 0x41	; 65
 17e:	69 81       	ldd	r22, Y+1	; 0x01
 180:	7a 81       	ldd	r23, Y+2	; 0x02
 182:	8b 81       	ldd	r24, Y+3	; 0x03
 184:	9c 81       	ldd	r25, Y+4	; 0x04
 186:	0e 94 f6 01 	call	0x3ec	; 0x3ec <__mulsf3>
 18a:	dc 01       	movw	r26, r24
 18c:	cb 01       	movw	r24, r22
 18e:	bc 01       	movw	r22, r24
 190:	cd 01       	movw	r24, r26
 192:	0e 94 75 01 	call	0x2ea	; 0x2ea <__fixunssfsi>
 196:	dc 01       	movw	r26, r24
 198:	cb 01       	movw	r24, r22
 19a:	98 8f       	std	Y+24, r25	; 0x18
 19c:	8f 8b       	std	Y+23, r24	; 0x17
 19e:	0f c0       	rjmp	.+30     	; 0x1be <main+0xda>
 1a0:	80 e9       	ldi	r24, 0x90	; 144
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	9a 8f       	std	Y+26, r25	; 0x1a
 1a6:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a8:	89 8d       	ldd	r24, Y+25	; 0x19
 1aa:	9a 8d       	ldd	r25, Y+26	; 0x1a
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0xc8>
 1b0:	9a 8f       	std	Y+26, r25	; 0x1a
 1b2:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b4:	8f 89       	ldd	r24, Y+23	; 0x17
 1b6:	98 8d       	ldd	r25, Y+24	; 0x18
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	98 8f       	std	Y+24, r25	; 0x18
 1bc:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1be:	8f 89       	ldd	r24, Y+23	; 0x17
 1c0:	98 8d       	ldd	r25, Y+24	; 0x18
 1c2:	89 2b       	or	r24, r25
 1c4:	69 f7       	brne	.-38     	; 0x1a0 <main+0xbc>
 1c6:	14 c0       	rjmp	.+40     	; 0x1f0 <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1c8:	6b 89       	ldd	r22, Y+19	; 0x13
 1ca:	7c 89       	ldd	r23, Y+20	; 0x14
 1cc:	8d 89       	ldd	r24, Y+21	; 0x15
 1ce:	9e 89       	ldd	r25, Y+22	; 0x16
 1d0:	0e 94 75 01 	call	0x2ea	; 0x2ea <__fixunssfsi>
 1d4:	dc 01       	movw	r26, r24
 1d6:	cb 01       	movw	r24, r22
 1d8:	98 8f       	std	Y+24, r25	; 0x18
 1da:	8f 8b       	std	Y+23, r24	; 0x17
 1dc:	8f 89       	ldd	r24, Y+23	; 0x17
 1de:	98 8d       	ldd	r25, Y+24	; 0x18
 1e0:	9c 8f       	std	Y+28, r25	; 0x1c
 1e2:	8b 8f       	std	Y+27, r24	; 0x1b
 1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0x104>
 1ec:	9c 8f       	std	Y+28, r25	; 0x1c
 1ee:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(1000);
		PORTA = 0x55;
 1f0:	82 e2       	ldi	r24, 0x22	; 34
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	25 e5       	ldi	r18, 0x55	; 85
 1f6:	fc 01       	movw	r30, r24
 1f8:	20 83       	st	Z, r18
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	aa e7       	ldi	r26, 0x7A	; 122
 200:	b4 e4       	ldi	r27, 0x44	; 68
 202:	8d 83       	std	Y+5, r24	; 0x05
 204:	9e 83       	std	Y+6, r25	; 0x06
 206:	af 83       	std	Y+7, r26	; 0x07
 208:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	4a e7       	ldi	r20, 0x7A	; 122
 210:	55 e4       	ldi	r21, 0x45	; 69
 212:	6d 81       	ldd	r22, Y+5	; 0x05
 214:	7e 81       	ldd	r23, Y+6	; 0x06
 216:	8f 81       	ldd	r24, Y+7	; 0x07
 218:	98 85       	ldd	r25, Y+8	; 0x08
 21a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <__mulsf3>
 21e:	dc 01       	movw	r26, r24
 220:	cb 01       	movw	r24, r22
 222:	89 87       	std	Y+9, r24	; 0x09
 224:	9a 87       	std	Y+10, r25	; 0x0a
 226:	ab 87       	std	Y+11, r26	; 0x0b
 228:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	40 e8       	ldi	r20, 0x80	; 128
 230:	5f e3       	ldi	r21, 0x3F	; 63
 232:	69 85       	ldd	r22, Y+9	; 0x09
 234:	7a 85       	ldd	r23, Y+10	; 0x0a
 236:	8b 85       	ldd	r24, Y+11	; 0x0b
 238:	9c 85       	ldd	r25, Y+12	; 0x0c
 23a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__cmpsf2>
 23e:	88 23       	and	r24, r24
 240:	2c f4       	brge	.+10     	; 0x24c <main+0x168>
		__ticks = 1;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	9e 87       	std	Y+14, r25	; 0x0e
 248:	8d 87       	std	Y+13, r24	; 0x0d
 24a:	3f c0       	rjmp	.+126    	; 0x2ca <main+0x1e6>
	else if (__tmp > 65535)
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	3f ef       	ldi	r19, 0xFF	; 255
 250:	4f e7       	ldi	r20, 0x7F	; 127
 252:	57 e4       	ldi	r21, 0x47	; 71
 254:	69 85       	ldd	r22, Y+9	; 0x09
 256:	7a 85       	ldd	r23, Y+10	; 0x0a
 258:	8b 85       	ldd	r24, Y+11	; 0x0b
 25a:	9c 85       	ldd	r25, Y+12	; 0x0c
 25c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__gesf2>
 260:	18 16       	cp	r1, r24
 262:	4c f5       	brge	.+82     	; 0x2b6 <main+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 e2       	ldi	r20, 0x20	; 32
 26a:	51 e4       	ldi	r21, 0x41	; 65
 26c:	6d 81       	ldd	r22, Y+5	; 0x05
 26e:	7e 81       	ldd	r23, Y+6	; 0x06
 270:	8f 81       	ldd	r24, Y+7	; 0x07
 272:	98 85       	ldd	r25, Y+8	; 0x08
 274:	0e 94 f6 01 	call	0x3ec	; 0x3ec <__mulsf3>
 278:	dc 01       	movw	r26, r24
 27a:	cb 01       	movw	r24, r22
 27c:	bc 01       	movw	r22, r24
 27e:	cd 01       	movw	r24, r26
 280:	0e 94 75 01 	call	0x2ea	; 0x2ea <__fixunssfsi>
 284:	dc 01       	movw	r26, r24
 286:	cb 01       	movw	r24, r22
 288:	9e 87       	std	Y+14, r25	; 0x0e
 28a:	8d 87       	std	Y+13, r24	; 0x0d
 28c:	0f c0       	rjmp	.+30     	; 0x2ac <main+0x1c8>
 28e:	80 e9       	ldi	r24, 0x90	; 144
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	98 8b       	std	Y+16, r25	; 0x10
 294:	8f 87       	std	Y+15, r24	; 0x0f
 296:	8f 85       	ldd	r24, Y+15	; 0x0f
 298:	98 89       	ldd	r25, Y+16	; 0x10
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <main+0x1b6>
 29e:	98 8b       	std	Y+16, r25	; 0x10
 2a0:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a2:	8d 85       	ldd	r24, Y+13	; 0x0d
 2a4:	9e 85       	ldd	r25, Y+14	; 0x0e
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	9e 87       	std	Y+14, r25	; 0x0e
 2aa:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ac:	8d 85       	ldd	r24, Y+13	; 0x0d
 2ae:	9e 85       	ldd	r25, Y+14	; 0x0e
 2b0:	89 2b       	or	r24, r25
 2b2:	69 f7       	brne	.-38     	; 0x28e <main+0x1aa>
 2b4:	14 c0       	rjmp	.+40     	; 0x2de <main+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2b6:	69 85       	ldd	r22, Y+9	; 0x09
 2b8:	7a 85       	ldd	r23, Y+10	; 0x0a
 2ba:	8b 85       	ldd	r24, Y+11	; 0x0b
 2bc:	9c 85       	ldd	r25, Y+12	; 0x0c
 2be:	0e 94 75 01 	call	0x2ea	; 0x2ea <__fixunssfsi>
 2c2:	dc 01       	movw	r26, r24
 2c4:	cb 01       	movw	r24, r22
 2c6:	9e 87       	std	Y+14, r25	; 0x0e
 2c8:	8d 87       	std	Y+13, r24	; 0x0d
 2ca:	8d 85       	ldd	r24, Y+13	; 0x0d
 2cc:	9e 85       	ldd	r25, Y+14	; 0x0e
 2ce:	9a 8b       	std	Y+18, r25	; 0x12
 2d0:	89 8b       	std	Y+17, r24	; 0x11
 2d2:	89 89       	ldd	r24, Y+17	; 0x11
 2d4:	9a 89       	ldd	r25, Y+18	; 0x12
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <main+0x1f2>
 2da:	9a 8b       	std	Y+18, r25	; 0x12
 2dc:	89 8b       	std	Y+17, r24	; 0x11
		_delay_ms(1000);
	}
 2de:	11 cf       	rjmp	.-478    	; 0x102 <main+0x1e>

000002e0 <__cmpsf2>:
 2e0:	0e 94 a4 01 	call	0x348	; 0x348 <__fp_cmp>
 2e4:	08 f4       	brcc	.+2      	; 0x2e8 <__cmpsf2+0x8>
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	08 95       	ret

000002ea <__fixunssfsi>:
 2ea:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fp_splitA>
 2ee:	88 f0       	brcs	.+34     	; 0x312 <__fixunssfsi+0x28>
 2f0:	9f 57       	subi	r25, 0x7F	; 127
 2f2:	98 f0       	brcs	.+38     	; 0x31a <__fixunssfsi+0x30>
 2f4:	b9 2f       	mov	r27, r25
 2f6:	99 27       	eor	r25, r25
 2f8:	b7 51       	subi	r27, 0x17	; 23
 2fa:	b0 f0       	brcs	.+44     	; 0x328 <__fixunssfsi+0x3e>
 2fc:	e1 f0       	breq	.+56     	; 0x336 <__fixunssfsi+0x4c>
 2fe:	66 0f       	add	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	88 1f       	adc	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	1a f0       	brmi	.+6      	; 0x30e <__fixunssfsi+0x24>
 308:	ba 95       	dec	r27
 30a:	c9 f7       	brne	.-14     	; 0x2fe <__fixunssfsi+0x14>
 30c:	14 c0       	rjmp	.+40     	; 0x336 <__fixunssfsi+0x4c>
 30e:	b1 30       	cpi	r27, 0x01	; 1
 310:	91 f0       	breq	.+36     	; 0x336 <__fixunssfsi+0x4c>
 312:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__fp_zero>
 316:	b1 e0       	ldi	r27, 0x01	; 1
 318:	08 95       	ret
 31a:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__fp_zero>
 31e:	67 2f       	mov	r22, r23
 320:	78 2f       	mov	r23, r24
 322:	88 27       	eor	r24, r24
 324:	b8 5f       	subi	r27, 0xF8	; 248
 326:	39 f0       	breq	.+14     	; 0x336 <__fixunssfsi+0x4c>
 328:	b9 3f       	cpi	r27, 0xF9	; 249
 32a:	cc f3       	brlt	.-14     	; 0x31e <__fixunssfsi+0x34>
 32c:	86 95       	lsr	r24
 32e:	77 95       	ror	r23
 330:	67 95       	ror	r22
 332:	b3 95       	inc	r27
 334:	d9 f7       	brne	.-10     	; 0x32c <__fixunssfsi+0x42>
 336:	3e f4       	brtc	.+14     	; 0x346 <__fixunssfsi+0x5c>
 338:	90 95       	com	r25
 33a:	80 95       	com	r24
 33c:	70 95       	com	r23
 33e:	61 95       	neg	r22
 340:	7f 4f       	sbci	r23, 0xFF	; 255
 342:	8f 4f       	sbci	r24, 0xFF	; 255
 344:	9f 4f       	sbci	r25, 0xFF	; 255
 346:	08 95       	ret

00000348 <__fp_cmp>:
 348:	99 0f       	add	r25, r25
 34a:	00 08       	sbc	r0, r0
 34c:	55 0f       	add	r21, r21
 34e:	aa 0b       	sbc	r26, r26
 350:	e0 e8       	ldi	r30, 0x80	; 128
 352:	fe ef       	ldi	r31, 0xFE	; 254
 354:	16 16       	cp	r1, r22
 356:	17 06       	cpc	r1, r23
 358:	e8 07       	cpc	r30, r24
 35a:	f9 07       	cpc	r31, r25
 35c:	c0 f0       	brcs	.+48     	; 0x38e <__fp_cmp+0x46>
 35e:	12 16       	cp	r1, r18
 360:	13 06       	cpc	r1, r19
 362:	e4 07       	cpc	r30, r20
 364:	f5 07       	cpc	r31, r21
 366:	98 f0       	brcs	.+38     	; 0x38e <__fp_cmp+0x46>
 368:	62 1b       	sub	r22, r18
 36a:	73 0b       	sbc	r23, r19
 36c:	84 0b       	sbc	r24, r20
 36e:	95 0b       	sbc	r25, r21
 370:	39 f4       	brne	.+14     	; 0x380 <__fp_cmp+0x38>
 372:	0a 26       	eor	r0, r26
 374:	61 f0       	breq	.+24     	; 0x38e <__fp_cmp+0x46>
 376:	23 2b       	or	r18, r19
 378:	24 2b       	or	r18, r20
 37a:	25 2b       	or	r18, r21
 37c:	21 f4       	brne	.+8      	; 0x386 <__fp_cmp+0x3e>
 37e:	08 95       	ret
 380:	0a 26       	eor	r0, r26
 382:	09 f4       	brne	.+2      	; 0x386 <__fp_cmp+0x3e>
 384:	a1 40       	sbci	r26, 0x01	; 1
 386:	a6 95       	lsr	r26
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	81 1d       	adc	r24, r1
 38c:	81 1d       	adc	r24, r1
 38e:	08 95       	ret

00000390 <__fp_split3>:
 390:	57 fd       	sbrc	r21, 7
 392:	90 58       	subi	r25, 0x80	; 128
 394:	44 0f       	add	r20, r20
 396:	55 1f       	adc	r21, r21
 398:	59 f0       	breq	.+22     	; 0x3b0 <__fp_splitA+0x10>
 39a:	5f 3f       	cpi	r21, 0xFF	; 255
 39c:	71 f0       	breq	.+28     	; 0x3ba <__fp_splitA+0x1a>
 39e:	47 95       	ror	r20

000003a0 <__fp_splitA>:
 3a0:	88 0f       	add	r24, r24
 3a2:	97 fb       	bst	r25, 7
 3a4:	99 1f       	adc	r25, r25
 3a6:	61 f0       	breq	.+24     	; 0x3c0 <__fp_splitA+0x20>
 3a8:	9f 3f       	cpi	r25, 0xFF	; 255
 3aa:	79 f0       	breq	.+30     	; 0x3ca <__fp_splitA+0x2a>
 3ac:	87 95       	ror	r24
 3ae:	08 95       	ret
 3b0:	12 16       	cp	r1, r18
 3b2:	13 06       	cpc	r1, r19
 3b4:	14 06       	cpc	r1, r20
 3b6:	55 1f       	adc	r21, r21
 3b8:	f2 cf       	rjmp	.-28     	; 0x39e <__fp_split3+0xe>
 3ba:	46 95       	lsr	r20
 3bc:	f1 df       	rcall	.-30     	; 0x3a0 <__fp_splitA>
 3be:	08 c0       	rjmp	.+16     	; 0x3d0 <__fp_splitA+0x30>
 3c0:	16 16       	cp	r1, r22
 3c2:	17 06       	cpc	r1, r23
 3c4:	18 06       	cpc	r1, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	f1 cf       	rjmp	.-30     	; 0x3ac <__fp_splitA+0xc>
 3ca:	86 95       	lsr	r24
 3cc:	71 05       	cpc	r23, r1
 3ce:	61 05       	cpc	r22, r1
 3d0:	08 94       	sec
 3d2:	08 95       	ret

000003d4 <__fp_zero>:
 3d4:	e8 94       	clt

000003d6 <__fp_szero>:
 3d6:	bb 27       	eor	r27, r27
 3d8:	66 27       	eor	r22, r22
 3da:	77 27       	eor	r23, r23
 3dc:	cb 01       	movw	r24, r22
 3de:	97 f9       	bld	r25, 7
 3e0:	08 95       	ret

000003e2 <__gesf2>:
 3e2:	0e 94 a4 01 	call	0x348	; 0x348 <__fp_cmp>
 3e6:	08 f4       	brcc	.+2      	; 0x3ea <__gesf2+0x8>
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	08 95       	ret

000003ec <__mulsf3>:
 3ec:	0e 94 09 02 	call	0x412	; 0x412 <__mulsf3x>
 3f0:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__fp_round>
 3f4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__fp_pscA>
 3f8:	38 f0       	brcs	.+14     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3fa:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__fp_pscB>
 3fe:	20 f0       	brcs	.+8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 400:	95 23       	and	r25, r21
 402:	11 f0       	breq	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__fp_inf>
 408:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__fp_nan>
 40c:	11 24       	eor	r1, r1
 40e:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__fp_szero>

00000412 <__mulsf3x>:
 412:	0e 94 c8 01 	call	0x390	; 0x390 <__fp_split3>
 416:	70 f3       	brcs	.-36     	; 0x3f4 <__mulsf3+0x8>

00000418 <__mulsf3_pse>:
 418:	95 9f       	mul	r25, r21
 41a:	c1 f3       	breq	.-16     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 41c:	95 0f       	add	r25, r21
 41e:	50 e0       	ldi	r21, 0x00	; 0
 420:	55 1f       	adc	r21, r21
 422:	62 9f       	mul	r22, r18
 424:	f0 01       	movw	r30, r0
 426:	72 9f       	mul	r23, r18
 428:	bb 27       	eor	r27, r27
 42a:	f0 0d       	add	r31, r0
 42c:	b1 1d       	adc	r27, r1
 42e:	63 9f       	mul	r22, r19
 430:	aa 27       	eor	r26, r26
 432:	f0 0d       	add	r31, r0
 434:	b1 1d       	adc	r27, r1
 436:	aa 1f       	adc	r26, r26
 438:	64 9f       	mul	r22, r20
 43a:	66 27       	eor	r22, r22
 43c:	b0 0d       	add	r27, r0
 43e:	a1 1d       	adc	r26, r1
 440:	66 1f       	adc	r22, r22
 442:	82 9f       	mul	r24, r18
 444:	22 27       	eor	r18, r18
 446:	b0 0d       	add	r27, r0
 448:	a1 1d       	adc	r26, r1
 44a:	62 1f       	adc	r22, r18
 44c:	73 9f       	mul	r23, r19
 44e:	b0 0d       	add	r27, r0
 450:	a1 1d       	adc	r26, r1
 452:	62 1f       	adc	r22, r18
 454:	83 9f       	mul	r24, r19
 456:	a0 0d       	add	r26, r0
 458:	61 1d       	adc	r22, r1
 45a:	22 1f       	adc	r18, r18
 45c:	74 9f       	mul	r23, r20
 45e:	33 27       	eor	r19, r19
 460:	a0 0d       	add	r26, r0
 462:	61 1d       	adc	r22, r1
 464:	23 1f       	adc	r18, r19
 466:	84 9f       	mul	r24, r20
 468:	60 0d       	add	r22, r0
 46a:	21 1d       	adc	r18, r1
 46c:	82 2f       	mov	r24, r18
 46e:	76 2f       	mov	r23, r22
 470:	6a 2f       	mov	r22, r26
 472:	11 24       	eor	r1, r1
 474:	9f 57       	subi	r25, 0x7F	; 127
 476:	50 40       	sbci	r21, 0x00	; 0
 478:	9a f0       	brmi	.+38     	; 0x4a0 <__mulsf3_pse+0x88>
 47a:	f1 f0       	breq	.+60     	; 0x4b8 <__mulsf3_pse+0xa0>
 47c:	88 23       	and	r24, r24
 47e:	4a f0       	brmi	.+18     	; 0x492 <__mulsf3_pse+0x7a>
 480:	ee 0f       	add	r30, r30
 482:	ff 1f       	adc	r31, r31
 484:	bb 1f       	adc	r27, r27
 486:	66 1f       	adc	r22, r22
 488:	77 1f       	adc	r23, r23
 48a:	88 1f       	adc	r24, r24
 48c:	91 50       	subi	r25, 0x01	; 1
 48e:	50 40       	sbci	r21, 0x00	; 0
 490:	a9 f7       	brne	.-22     	; 0x47c <__mulsf3_pse+0x64>
 492:	9e 3f       	cpi	r25, 0xFE	; 254
 494:	51 05       	cpc	r21, r1
 496:	80 f0       	brcs	.+32     	; 0x4b8 <__mulsf3_pse+0xa0>
 498:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__fp_inf>
 49c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__fp_szero>
 4a0:	5f 3f       	cpi	r21, 0xFF	; 255
 4a2:	e4 f3       	brlt	.-8      	; 0x49c <__mulsf3_pse+0x84>
 4a4:	98 3e       	cpi	r25, 0xE8	; 232
 4a6:	d4 f3       	brlt	.-12     	; 0x49c <__mulsf3_pse+0x84>
 4a8:	86 95       	lsr	r24
 4aa:	77 95       	ror	r23
 4ac:	67 95       	ror	r22
 4ae:	b7 95       	ror	r27
 4b0:	f7 95       	ror	r31
 4b2:	e7 95       	ror	r30
 4b4:	9f 5f       	subi	r25, 0xFF	; 255
 4b6:	c1 f7       	brne	.-16     	; 0x4a8 <__mulsf3_pse+0x90>
 4b8:	fe 2b       	or	r31, r30
 4ba:	88 0f       	add	r24, r24
 4bc:	91 1d       	adc	r25, r1
 4be:	96 95       	lsr	r25
 4c0:	87 95       	ror	r24
 4c2:	97 f9       	bld	r25, 7
 4c4:	08 95       	ret

000004c6 <__fp_inf>:
 4c6:	97 f9       	bld	r25, 7
 4c8:	9f 67       	ori	r25, 0x7F	; 127
 4ca:	80 e8       	ldi	r24, 0x80	; 128
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	08 95       	ret

000004d2 <__fp_nan>:
 4d2:	9f ef       	ldi	r25, 0xFF	; 255
 4d4:	80 ec       	ldi	r24, 0xC0	; 192
 4d6:	08 95       	ret

000004d8 <__fp_pscA>:
 4d8:	00 24       	eor	r0, r0
 4da:	0a 94       	dec	r0
 4dc:	16 16       	cp	r1, r22
 4de:	17 06       	cpc	r1, r23
 4e0:	18 06       	cpc	r1, r24
 4e2:	09 06       	cpc	r0, r25
 4e4:	08 95       	ret

000004e6 <__fp_pscB>:
 4e6:	00 24       	eor	r0, r0
 4e8:	0a 94       	dec	r0
 4ea:	12 16       	cp	r1, r18
 4ec:	13 06       	cpc	r1, r19
 4ee:	14 06       	cpc	r1, r20
 4f0:	05 06       	cpc	r0, r21
 4f2:	08 95       	ret

000004f4 <__fp_round>:
 4f4:	09 2e       	mov	r0, r25
 4f6:	03 94       	inc	r0
 4f8:	00 0c       	add	r0, r0
 4fa:	11 f4       	brne	.+4      	; 0x500 <__fp_round+0xc>
 4fc:	88 23       	and	r24, r24
 4fe:	52 f0       	brmi	.+20     	; 0x514 <__fp_round+0x20>
 500:	bb 0f       	add	r27, r27
 502:	40 f4       	brcc	.+16     	; 0x514 <__fp_round+0x20>
 504:	bf 2b       	or	r27, r31
 506:	11 f4       	brne	.+4      	; 0x50c <__fp_round+0x18>
 508:	60 ff       	sbrs	r22, 0
 50a:	04 c0       	rjmp	.+8      	; 0x514 <__fp_round+0x20>
 50c:	6f 5f       	subi	r22, 0xFF	; 255
 50e:	7f 4f       	sbci	r23, 0xFF	; 255
 510:	8f 4f       	sbci	r24, 0xFF	; 255
 512:	9f 4f       	sbci	r25, 0xFF	; 255
 514:	08 95       	ret

00000516 <_exit>:
 516:	f8 94       	cli

00000518 <__stop_program>:
 518:	ff cf       	rjmp	.-2      	; 0x518 <__stop_program>
